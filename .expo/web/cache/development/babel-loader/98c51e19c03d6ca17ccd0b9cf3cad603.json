{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\n\nvar ListItem = function (_React$Component) {\n  _inherits(ListItem, _React$Component);\n\n  var _super = _createSuper(ListItem);\n\n  function ListItem() {\n    _classCallCheck(this, ListItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ListItem, [{\n    key: \"renderDescription\",\n    value: function renderDescription(descriptionColor, description) {\n      var _this$props2 = this.props,\n          descriptionEllipsizeMode = _this$props2.descriptionEllipsizeMode,\n          descriptionStyle = _this$props2.descriptionStyle,\n          descriptionNumberOfLines = _this$props2.descriptionNumberOfLines;\n      return typeof description === 'function' ? description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize\n      }) : React.createElement(Text, {\n        numberOfLines: descriptionNumberOfLines,\n        ellipsizeMode: descriptionEllipsizeMode,\n        style: [styles.description, {\n          color: descriptionColor\n        }, descriptionStyle]\n      }, description);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          left = _this$props.left,\n          right = _this$props.right,\n          title = _this$props.title,\n          description = _this$props.description,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          titleStyle = _this$props.titleStyle,\n          titleNumberOfLines = _this$props.titleNumberOfLines,\n          titleEllipsizeMode = _this$props.titleEllipsizeMode,\n          rest = _objectWithoutProperties(_this$props, [\"left\", \"right\", \"title\", \"description\", \"onPress\", \"theme\", \"style\", \"titleStyle\", \"titleNumberOfLines\", \"titleEllipsizeMode\"]);\n\n      var titleColor = color(theme.colors.text).alpha(0.87).rgb().string();\n      var descriptionColor = color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        style: [styles.container, style],\n        onPress: onPress\n      }), React.createElement(View, {\n        style: styles.row\n      }, left ? left({\n        color: descriptionColor,\n        style: description ? styles.iconMarginLeft : _objectSpread(_objectSpread({}, styles.iconMarginLeft), styles.marginVerticalNone)\n      }) : null, React.createElement(View, {\n        style: [styles.item, styles.content]\n      }, React.createElement(Text, {\n        ellipsizeMode: titleEllipsizeMode,\n        numberOfLines: titleNumberOfLines,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle]\n      }, title), description ? this.renderDescription(descriptionColor, description) : null), right ? right({\n        color: descriptionColor,\n        style: description ? styles.iconMarginRight : _objectSpread(_objectSpread({}, styles.iconMarginRight), styles.marginVerticalNone)\n      }) : null));\n    }\n  }]);\n\n  return ListItem;\n}(React.Component);\n\n_defineProperty(ListItem, \"displayName\", 'List.Item');\n\n_defineProperty(ListItem, \"defaultProps\", {\n  titleNumberOfLines: 1,\n  descriptionNumberOfLines: 2\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    padding: 8\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  title: {\n    fontSize: 16\n  },\n  description: {\n    fontSize: 14\n  },\n  marginVerticalNone: {\n    marginVertical: 0\n  },\n  iconMarginLeft: {\n    marginLeft: 0,\n    marginRight: 16\n  },\n  iconMarginRight: {\n    marginRight: 0\n  },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center'\n  }\n});\nexport default withTheme(ListItem);","map":{"version":3,"sources":["ListItem.tsx"],"names":["ListItem","React","titleNumberOfLines","descriptionNumberOfLines","renderDescription","description","ellipsizeMode","color","fontSize","styles","descriptionColor","render","titleEllipsizeMode","titleColor","theme","onPress","row","left","style","right","container","padding","flexDirection","title","marginVerticalNone","marginVertical","iconMarginLeft","marginLeft","marginRight","iconMarginRight","item","paddingLeft","content","flex","justifyContent","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren, EllipsizeProp } from '../../types';\n\ntype Description =\n  | React.ReactNode\n  | ((props: {\n      ellipsizeMode: EllipsizeProp | undefined;\n      color: string;\n      fontSize: number;\n    }) => React.ReactNode);\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Title text for the list item.\n   */\n  title: React.ReactNode;\n  /**\n   * Description text for the list item or callback which returns a React element to display the description.\n   */\n  description?: Description | null;\n  /**\n   * Callback which returns a React element to display on the left side.\n   */\n  left?: (props: {\n    color: string;\n    style: {\n      marginLeft: number;\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to display on the right side.\n   */\n  right?: (props: {\n    color: string;\n    style?: {\n      marginRight: number;\n      marginVertical?: number;\n    };\n  }) => React.ReactNode;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Style that is passed to the wrapping TouchableRipple element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Title element.\n   */\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * Style that is passed to Description element.\n   */\n  descriptionStyle?: StyleProp<TextStyle>;\n  /**\n   * Truncate Title text such that the total number of lines does not\n   * exceed this number.\n   */\n  titleNumberOfLines?: number;\n  /**\n   * Truncate Description text such that the total number of lines does not\n   * exceed this number.\n   */\n  descriptionNumberOfLines?: number;\n  /**\n   * Ellipsize Mode for the Title\n   */\n  titleEllipsizeMode?: EllipsizeProp;\n  /**\n   * Ellipsize Mode for the Description\n   */\n  descriptionEllipsizeMode?: EllipsizeProp;\n};\n\n/**\n * A component to show tiles inside a List.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/list-item-1.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-2.png\" />\n *   <img class=\"medium\" src=\"screenshots/list-item-3.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { List } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <List.Item\n *     title=\"First Item\"\n *     description=\"Item description\"\n *     left={props => <List.Icon {...props} icon=\"folder\" />}\n *   />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ListItem extends React.Component<Props> {\n  static displayName = 'List.Item';\n\n  static defaultProps: Partial<Props> = {\n    titleNumberOfLines: 1,\n    descriptionNumberOfLines: 2,\n  };\n\n  renderDescription(\n    descriptionColor: string,\n    description?: Description | null\n  ) {\n    const {\n      descriptionEllipsizeMode,\n      descriptionStyle,\n      descriptionNumberOfLines,\n    } = this.props;\n\n    return typeof description === 'function' ? (\n      description({\n        ellipsizeMode: descriptionEllipsizeMode,\n        color: descriptionColor,\n        fontSize: styles.description.fontSize,\n      })\n    ) : (\n      <Text\n        numberOfLines={descriptionNumberOfLines}\n        ellipsizeMode={descriptionEllipsizeMode}\n        style={[\n          styles.description,\n          { color: descriptionColor },\n          descriptionStyle,\n        ]}\n      >\n        {description}\n      </Text>\n    );\n  }\n\n  render() {\n    const {\n      left,\n      right,\n      title,\n      description,\n      onPress,\n      theme,\n      style,\n      titleStyle,\n      titleNumberOfLines,\n      titleEllipsizeMode,\n      ...rest\n    } = this.props;\n    const titleColor = color(theme.colors.text)\n      .alpha(0.87)\n      .rgb()\n      .string();\n    const descriptionColor = color(theme.colors.text)\n      .alpha(0.54)\n      .rgb()\n      .string();\n\n    return (\n      <TouchableRipple\n        {...rest}\n        style={[styles.container, style]}\n        onPress={onPress}\n      >\n        <View style={styles.row}>\n          {left\n            ? left({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginLeft\n                  : {\n                      ...styles.iconMarginLeft,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n          <View style={[styles.item, styles.content]}>\n            <Text\n              ellipsizeMode={titleEllipsizeMode}\n              numberOfLines={titleNumberOfLines}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n            {description\n              ? this.renderDescription(descriptionColor, description)\n              : null}\n          </View>\n          {right\n            ? right({\n                color: descriptionColor,\n                style: description\n                  ? styles.iconMarginRight\n                  : {\n                      ...styles.iconMarginRight,\n                      ...styles.marginVerticalNone,\n                    },\n              })\n            : null}\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 8,\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  title: {\n    fontSize: 16,\n  },\n  description: {\n    fontSize: 14,\n  },\n  marginVerticalNone: { marginVertical: 0 },\n  iconMarginLeft: { marginLeft: 0, marginRight: 16 },\n  iconMarginRight: { marginRight: 0 },\n  item: {\n    marginVertical: 6,\n    paddingLeft: 8,\n  },\n  content: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n});\n\nexport default withTheme(ListItem);\n"]},"metadata":{},"sourceType":"module"}