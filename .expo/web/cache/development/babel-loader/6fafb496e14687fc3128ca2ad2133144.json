{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport color from 'color';\nimport InputLabel from \"./Label/InputLabel\";\nimport LabelBackground from \"./Label/LabelBackground\";\nimport { MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, LABEL_WIGGLE_X_OFFSET } from \"./constants\";\nimport { calculateLabelTopPosition, calculateInputHeight, calculatePadding, adjustPaddingOut, interpolatePlaceholder } from \"./helpers\";\nvar OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nvar LABEL_PADDING_TOP = 8;\nvar MIN_HEIGHT = 64;\nvar MIN_DENSE_HEIGHT = 48;\nvar INPUT_PADDING_HORIZONTAL = 14;\n\nvar TextInputOutlined = function (_React$Component) {\n  _inherits(TextInputOutlined, _React$Component);\n\n  var _super = _createSuper(TextInputOutlined);\n\n  function TextInputOutlined() {\n    _classCallCheck(this, TextInputOutlined);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(TextInputOutlined, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          disabled = _this$props.disabled,\n          editable = _this$props.editable,\n          label = _this$props.label,\n          error = _this$props.error,\n          selectionColor = _this$props.selectionColor,\n          underlineColor = _this$props.underlineColor,\n          dense = _this$props.dense,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          render = _this$props.render,\n          multiline = _this$props.multiline,\n          parentState = _this$props.parentState,\n          innerRef = _this$props.innerRef,\n          onFocus = _this$props.onFocus,\n          onBlur = _this$props.onBlur,\n          onChangeText = _this$props.onChangeText,\n          onLayoutAnimatedText = _this$props.onLayoutAnimatedText,\n          rest = _objectWithoutProperties(_this$props, [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\"]);\n\n      var colors = theme.colors,\n          fonts = theme.fonts;\n      var font = fonts.regular;\n      var hasActiveOutline = parentState.focused || error;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          fontSizeStyle = _ref.fontSize,\n          fontWeight = _ref.fontWeight,\n          height = _ref.height,\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? colors.background : _ref$backgroundColor,\n          viewStyle = _objectWithoutProperties(_ref, [\"fontSize\", \"fontWeight\", \"height\", \"backgroundColor\"]);\n\n      var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n      var inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n      if (disabled) {\n        inputTextColor = activeColor = color(colors.text).alpha(0.54).rgb().string();\n        placeholderColor = outlineColor = colors.disabled;\n      } else {\n        inputTextColor = colors.text;\n        activeColor = error ? colors.error : colors.primary;\n        placeholderColor = outlineColor = colors.placeholder;\n        errorColor = colors.error;\n      }\n\n      var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n      var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n      var labelWidth = parentState.labelLayout.width;\n      var labelHeight = parentState.labelLayout.height;\n      var labelHalfWidth = labelWidth / 2;\n      var labelHalfHeight = labelHeight / 2;\n      var baseLabelTranslateX = (I18nManager.isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2 - (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n      var minInputHeight = (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n      var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n      var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, LABEL_PADDING_TOP);\n      if (height && typeof height !== 'number') console.warn('Currently we support only numbers in height prop');\n      var paddingSettings = {\n        height: height ? +height : null,\n        labelHalfHeight: labelHalfHeight,\n        offset: LABEL_PADDING_TOP,\n        multiline: multiline ? multiline : null,\n        dense: dense ? dense : null,\n        topPosition: topPosition,\n        fontSize: fontSize,\n        label: label,\n        scale: fontScale,\n        isAndroid: Platform.OS === 'android',\n        styles: StyleSheet.flatten(dense ? styles.inputOutlinedDense : styles.inputOutlined)\n      };\n      var pad = calculatePadding(paddingSettings);\n      var paddingOut = adjustPaddingOut(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n        pad: pad\n      }));\n      var baseLabelTranslateY = -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n      var placeholderOpacity = interpolatePlaceholder(parentState.labeled, hasActiveOutline);\n      var labelProps = {\n        label: label,\n        onLayoutAnimatedText: onLayoutAnimatedText,\n        placeholderOpacity: placeholderOpacity,\n        error: error,\n        placeholderStyle: styles.placeholder,\n        baseLabelTranslateY: baseLabelTranslateY,\n        baseLabelTranslateX: baseLabelTranslateX,\n        font: font,\n        fontSize: fontSize,\n        fontWeight: fontWeight,\n        labelScale: labelScale,\n        wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n        topPosition: topPosition,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        placeholderColor: placeholderColor,\n        backgroundColor: backgroundColor,\n        errorColor: errorColor\n      };\n      var minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n      return React.createElement(View, {\n        style: viewStyle\n      }, React.createElement(View, null, React.createElement(Outline, {\n        theme: theme,\n        hasActiveOutline: hasActiveOutline,\n        activeColor: activeColor,\n        outlineColor: outlineColor,\n        backgroundColor: backgroundColor\n      }), React.createElement(View, {\n        style: {\n          paddingTop: LABEL_PADDING_TOP,\n          paddingBottom: 0,\n          minHeight: minHeight\n        }\n      }, React.createElement(InputLabel, {\n        parentState: parentState,\n        labelProps: labelProps,\n        labelBackground: LabelBackground\n      }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({}, rest), {}, {\n        ref: innerRef,\n        onChangeText: onChangeText,\n        placeholder: label ? parentState.placeholder : this.props.placeholder,\n        placeholderTextColor: placeholderColor,\n        editable: !disabled && editable,\n        selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n        onFocus: onFocus,\n        onBlur: onBlur,\n        underlineColorAndroid: 'transparent',\n        multiline: multiline,\n        style: [styles.input, !multiline || multiline && height ? {\n          height: inputHeight\n        } : {}, paddingOut, _objectSpread(_objectSpread({}, font), {}, {\n          fontSize: fontSize,\n          fontWeight: fontWeight,\n          color: inputTextColor,\n          textAlignVertical: multiline ? 'top' : 'center'\n        })]\n      })))));\n    }\n  }]);\n\n  return TextInputOutlined;\n}(React.Component);\n\n_defineProperty(TextInputOutlined, \"defaultProps\", {\n  disabled: false,\n  error: false,\n  multiline: false,\n  editable: true,\n  render: function render(props) {\n    return React.createElement(NativeTextInput, props);\n  }\n});\n\nexport default TextInputOutlined;\n\nvar Outline = function Outline(_ref2) {\n  var theme = _ref2.theme,\n      hasActiveOutline = _ref2.hasActiveOutline,\n      activeColor = _ref2.activeColor,\n      outlineColor = _ref2.outlineColor,\n      backgroundColor = _ref2.backgroundColor;\n  return React.createElement(View, {\n    pointerEvents: \"none\",\n    style: [styles.outline, {\n      backgroundColor: backgroundColor,\n      borderRadius: theme.roundness,\n      borderWidth: hasActiveOutline ? 2 : 1,\n      borderColor: hasActiveOutline ? activeColor : outlineColor\n    }]\n  });\n};\n\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4\n  }\n});","map":{"version":3,"sources":["TextInputOutlined.tsx"],"names":["OUTLINE_MINIMIZED_LABEL_Y_OFFSET","LABEL_PADDING_TOP","MIN_HEIGHT","MIN_DENSE_HEIGHT","INPUT_PADDING_HORIZONTAL","TextInputOutlined","React","disabled","error","multiline","editable","render","props","onLayoutAnimatedText","fonts","font","hasActiveOutline","parentState","fontSize","backgroundColor","colors","background","StyleSheet","fontSizeStyle","inputTextColor","activeColor","color","placeholderColor","outlineColor","errorColor","labelScale","MINIMIZED_LABEL_FONT_SIZE","fontScale","MAXIMIZED_LABEL_FONT_SIZE","labelWidth","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","minInputHeight","dense","inputHeight","calculateInputHeight","topPosition","calculateLabelTopPosition","height","console","paddingSettings","offset","label","scale","isAndroid","Platform","styles","pad","calculatePadding","paddingOut","adjustPaddingOut","baseLabelTranslateY","placeholderOpacity","interpolatePlaceholder","labelProps","placeholderStyle","fontWeight","wiggleOffsetX","minHeight","viewStyle","paddingTop","paddingBottom","LabelBackground","ref","onChangeText","placeholder","placeholderTextColor","selectionColor","onFocus","onBlur","underlineColorAndroid","style","textAlignVertical","Outline","borderRadius","theme","borderWidth","borderColor","position","left","paddingHorizontal","outline","right","top","bottom","input","flexGrow","margin","textAlign","zIndex","inputOutlined","inputOutlinedDense"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  TextInput as NativeTextInput,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  TextStyle,\n} from 'react-native';\nimport color from 'color';\n\nimport InputLabel from './Label/InputLabel';\nimport LabelBackground from './Label/LabelBackground';\nimport { RenderProps, ChildTextInputProps } from './types';\nimport { Theme } from '../../types';\n\nimport {\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  LABEL_WIGGLE_X_OFFSET,\n} from './constants';\n\nimport {\n  calculateLabelTopPosition,\n  calculateInputHeight,\n  calculatePadding,\n  adjustPaddingOut,\n  Padding,\n  interpolatePlaceholder,\n} from './helpers';\n\nconst OUTLINE_MINIMIZED_LABEL_Y_OFFSET = -6;\nconst LABEL_PADDING_TOP = 8;\nconst MIN_HEIGHT = 64;\nconst MIN_DENSE_HEIGHT = 48;\nconst INPUT_PADDING_HORIZONTAL = 14;\n\nclass TextInputOutlined extends React.Component<ChildTextInputProps, {}> {\n  static defaultProps = {\n    disabled: false,\n    error: false,\n    multiline: false,\n    editable: true,\n    render: (props: RenderProps) => <NativeTextInput {...props} />,\n  };\n\n  render() {\n    const {\n      disabled,\n      editable,\n      label,\n      error,\n      selectionColor,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      underlineColor,\n      dense,\n      style,\n      theme,\n      render,\n      multiline,\n      parentState,\n      innerRef,\n      onFocus,\n      onBlur,\n      onChangeText,\n      onLayoutAnimatedText,\n      ...rest\n    } = this.props;\n\n    const { colors, fonts } = theme;\n    const font = fonts.regular;\n    const hasActiveOutline = parentState.focused || error;\n\n    const {\n      fontSize: fontSizeStyle,\n      fontWeight,\n      height,\n      backgroundColor = colors.background,\n      ...viewStyle\n    } = (StyleSheet.flatten(style) || {}) as TextStyle;\n    const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n    let inputTextColor, activeColor, outlineColor, placeholderColor, errorColor;\n\n    if (disabled) {\n      inputTextColor = activeColor = color(colors.text)\n        .alpha(0.54)\n        .rgb()\n        .string();\n      placeholderColor = outlineColor = colors.disabled;\n    } else {\n      inputTextColor = colors.text;\n      activeColor = error ? colors.error : colors.primary;\n      placeholderColor = outlineColor = colors.placeholder;\n      errorColor = colors.error;\n    }\n\n    const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n    const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n    const labelWidth = parentState.labelLayout.width;\n    const labelHeight = parentState.labelLayout.height;\n    const labelHalfWidth = labelWidth / 2;\n    const labelHalfHeight = labelHeight / 2;\n\n    const baseLabelTranslateX =\n      (I18nManager.isRTL ? 1 : -1) *\n      (labelHalfWidth -\n        (labelScale * labelWidth) / 2 -\n        (fontSize - MINIMIZED_LABEL_FONT_SIZE) * labelScale);\n\n    const minInputHeight =\n      (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT) - LABEL_PADDING_TOP;\n\n    const inputHeight = calculateInputHeight(\n      labelHeight,\n      height,\n      minInputHeight\n    );\n\n    const topPosition = calculateLabelTopPosition(\n      labelHeight,\n      inputHeight,\n      LABEL_PADDING_TOP\n    );\n\n    if (height && typeof height !== 'number')\n      // eslint-disable-next-line\n      console.warn('Currently we support only numbers in height prop');\n\n    const paddingSettings = {\n      height: height ? +height : null,\n      labelHalfHeight,\n      offset: LABEL_PADDING_TOP,\n      multiline: multiline ? multiline : null,\n      dense: dense ? dense : null,\n      topPosition,\n      fontSize,\n      label,\n      scale: fontScale,\n      isAndroid: Platform.OS === 'android',\n      styles: StyleSheet.flatten(\n        dense ? styles.inputOutlinedDense : styles.inputOutlined\n      ) as Padding,\n    };\n\n    const pad = calculatePadding(paddingSettings);\n\n    const paddingOut = adjustPaddingOut({ ...paddingSettings, pad });\n\n    const baseLabelTranslateY =\n      -labelHalfHeight - (topPosition + OUTLINE_MINIMIZED_LABEL_Y_OFFSET);\n\n    const placeholderOpacity = interpolatePlaceholder(\n      parentState.labeled,\n      hasActiveOutline\n    );\n\n    const labelProps = {\n      label,\n      onLayoutAnimatedText,\n      placeholderOpacity,\n      error,\n      placeholderStyle: styles.placeholder,\n      baseLabelTranslateY,\n      baseLabelTranslateX,\n      font,\n      fontSize,\n      fontWeight,\n      labelScale,\n      wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n      topPosition,\n      hasActiveOutline,\n      activeColor,\n      placeholderColor,\n      backgroundColor,\n      errorColor,\n    };\n\n    const minHeight = height || (dense ? MIN_DENSE_HEIGHT : MIN_HEIGHT);\n\n    return (\n      <View style={viewStyle}>\n        {/*\n          Render the outline separately from the container\n          This is so that the label can overlap the outline\n          Otherwise the border will cut off the label on Android\n          */}\n        <View>\n          <Outline\n            theme={theme}\n            hasActiveOutline={hasActiveOutline}\n            activeColor={activeColor}\n            outlineColor={outlineColor}\n            backgroundColor={backgroundColor}\n          />\n          <View\n            style={{\n              paddingTop: LABEL_PADDING_TOP,\n              paddingBottom: 0,\n              minHeight,\n            }}\n          >\n            <InputLabel\n              parentState={parentState}\n              labelProps={labelProps}\n              labelBackground={LabelBackground}\n            />\n\n            {render?.({\n              ...rest,\n              ref: innerRef,\n              onChangeText,\n              placeholder: label\n                ? parentState.placeholder\n                : this.props.placeholder,\n              placeholderTextColor: placeholderColor,\n              editable: !disabled && editable,\n              selectionColor:\n                typeof selectionColor === 'undefined'\n                  ? activeColor\n                  : selectionColor,\n              onFocus,\n              onBlur,\n              underlineColorAndroid: 'transparent',\n              multiline,\n              style: [\n                styles.input,\n                !multiline || (multiline && height)\n                  ? { height: inputHeight }\n                  : {},\n                paddingOut,\n                {\n                  ...font,\n                  fontSize,\n                  fontWeight,\n                  color: inputTextColor,\n                  textAlignVertical: multiline ? 'top' : 'center',\n                },\n              ],\n            } as RenderProps)}\n          </View>\n        </View>\n      </View>\n    );\n  }\n}\n\nexport default TextInputOutlined;\n\ntype OutlineType = {\n  activeColor: string;\n  hasActiveOutline: boolean | undefined;\n  outlineColor: string | undefined;\n  backgroundColor: string | undefined;\n  theme: Theme;\n};\n\nconst Outline = ({\n  theme,\n  hasActiveOutline,\n  activeColor,\n  outlineColor,\n  backgroundColor,\n}: OutlineType) => (\n  <View\n    pointerEvents=\"none\"\n    style={[\n      styles.outline,\n      // eslint-disable-next-line react-native/no-inline-styles\n      {\n        backgroundColor,\n        borderRadius: theme.roundness,\n        borderWidth: hasActiveOutline ? 2 : 1,\n        borderColor: hasActiveOutline ? activeColor : outlineColor,\n      },\n    ]}\n  />\n);\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n  },\n  outline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 6,\n    bottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    paddingHorizontal: INPUT_PADDING_HORIZONTAL,\n    margin: 0,\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    zIndex: 1,\n  },\n  inputOutlined: {\n    paddingTop: 8,\n    paddingBottom: 8,\n  },\n  inputOutlinedDense: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}