{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme } from \"../../core/theming\";\nimport color from 'color';\nimport IconButton from \"../IconButton\";\nimport ToggleButtonGroup, { ToggleButtonGroupContext } from \"./ToggleButtonGroup\";\nimport ToggleButtonRow from \"./ToggleButtonRow\";\nimport { black, white } from \"../../styles/colors\";\n\nvar ToggleButton = function (_React$Component) {\n  _inherits(ToggleButton, _React$Component);\n\n  var _super = _createSuper(ToggleButton);\n\n  function ToggleButton() {\n    _classCallCheck(this, ToggleButton);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(ToggleButton, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          size = _this$props.size,\n          theme = _this$props.theme,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          disabled = _this$props.disabled,\n          style = _this$props.style,\n          value = _this$props.value,\n          status = _this$props.status,\n          _onPress = _this$props.onPress,\n          rest = _objectWithoutProperties(_this$props, [\"icon\", \"size\", \"theme\", \"accessibilityLabel\", \"disabled\", \"style\", \"value\", \"status\", \"onPress\"]);\n\n      var borderRadius = theme.roundness;\n      return React.createElement(ToggleButtonGroupContext.Consumer, null, function (context) {\n        var backgroundColor;\n        var checked = context && context.value === value || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark ? 'rgba(255, 255, 255, .12)' : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return React.createElement(IconButton, _extends({\n          borderless: false,\n          icon: icon,\n          onPress: function onPress(e) {\n            if (_onPress) {\n              _onPress(e);\n            }\n\n            if (context) {\n              context.onValueChange(!checked ? value : null);\n            }\n          },\n          size: size,\n          accessibilityLabel: accessibilityLabel,\n          disabled: disabled,\n          style: [styles.content, {\n            backgroundColor: backgroundColor,\n            borderRadius: borderRadius,\n            borderColor: color(theme.dark ? white : black).alpha(0.29).rgb().string()\n          }, style]\n        }, rest));\n      });\n    }\n  }]);\n\n  return ToggleButton;\n}(React.Component);\n\n_defineProperty(ToggleButton, \"Group\", ToggleButtonGroup);\n\n_defineProperty(ToggleButton, \"Row\", ToggleButtonRow);\n\nvar styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0\n  }\n});\nexport default withTheme(ToggleButton);","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","React","ToggleButtonGroup","ToggleButtonRow","render","onPress","borderRadius","theme","context","checked","status","backgroundColor","e","styles","borderColor","color","content","width","height","margin","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;AAOA,SAAA,SAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA;AACA,OAAA,iBAAA,IAAA,wBAAA;AAGA,OAAA,eAAA;AACA,SAAA,KAAA,EAAA,KAAA;;IA8EA,Y;;;;;;;;;;;;;WAOEI,kBAAS;MACP,IAAA,WAAA,GAWI,KAXJ,KAAA;MAAA,IAAM,IAAN,GAAA,WAAA,CAAM,IAAN;MAAA,IAAM,IAAN,GAAA,WAAA,CAAM,IAAN;MAAA,IAAM,KAAN,GAAA,WAAA,CAAM,KAAN;MAAA,IAAM,kBAAN,GAAA,WAAA,CAAM,kBAAN;MAAA,IAAM,QAAN,GAAA,WAAA,CAAM,QAAN;MAAA,IAAM,KAAN,GAAA,WAAA,CAAM,KAAN;MAAA,IAAM,KAAN,GAAA,WAAA,CAAM,KAAN;MAAA,IAAM,MAAN,GAAA,WAAA,CAAM,MAAN;MAAA,IASEC,QATF,GAAA,WAAA,CASEA,OATF;MAAA,IAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,oBAAA,EAAA,UAAA,EAAA,OAAA,EAAA,OAAA,EAAA,QAAA,EAAA,SAAA,CAAA,CAAA;;MAYA,IAAMC,YAAY,GAAGC,KAAK,CAA1B,SAAA;MAEA,OACE,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,EAAA,IAAA,EACIC,UAAAA,OAAD,EAAgE;QAC/D,IAAA,eAAA;QAEA,IAAMC,OAAuB,GAC1BD,OAAO,IAAIA,OAAO,CAAPA,KAAAA,KAAZ,KAACA,IAAuCE,MAAM,KADhD,SAAA;;QAGA,IAAA,OAAA,EAAa;UACXC,eAAe,GAAGJ,KAAK,CAALA,IAAAA,GAAAA,0BAAAA,GAAlBI,oBAAAA;QADF,CAAA,MAIO;UACLA,eAAe,GAAfA,aAAAA;QACD;;QAED,OACE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA,QAAA,CAAA;UACE,UAAU,EADZ,KAAA;UAEE,IAAI,EAFN,IAAA;UAGE,OAAO,EAAGC,iBAAAA,CAAD,EAAwC;YAC/C,IAAA,QAAA,EAAa;cACXP,QAAO,CAAPA,CAAO,CAAPA;YACD;;YAED,IAAA,OAAA,EAAa;cACXG,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,GAAA,KAAA,GAAtBA,IAAAA;YACD;UAVL,CAAA;UAYE,IAAI,EAZN,IAAA;UAaE,kBAAkB,EAbpB,kBAAA;UAcE,QAAQ,EAdV,QAAA;UAeE,KAAK,EAAE,CACLK,MAAM,CADD,OAAA,EAEL;YACEF,eADF,EACEA,eADF;YAEEL,YAFF,EAEEA,YAFF;YAGEQ,WAAW,EAAEC,KAAK,CAACR,KAAK,CAALA,IAAAA,GAAAA,KAAAA,GAANQ,KAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA;UAHf,CAFK,EAAA,KAAA;QAfT,CAAA,EADF,IACE,CAAA,CADF;MAhBN,CACE,CADF;IAkDD;;;;EAxEwBd,KAAK,CAAhC,S;;gBAAMD,Y,WAEWE,iB;;gBAFXF,Y,SAKSG,e;;AAsEf,IAAMU,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BG,OAAO,EAAE;IACPC,KAAK,EADE,EAAA;IAEPC,MAAM,EAFC,EAAA;IAGPC,MAAM,EAAE;EAHD;AADsB,CAAlB,CAAf;AAQA,eAAeC,SAAS,CAAxB,YAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport { IconSource } from '../Icon';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nclass ToggleButton extends React.Component<Props> {\n  // @component ./ToggleButtonGroup.tsx\n  static Group = ToggleButtonGroup;\n\n  // @component ./ToggleButtonRow.tsx\n  static Row = ToggleButtonRow;\n\n  render() {\n    const {\n      icon,\n      size,\n      theme,\n      accessibilityLabel,\n      disabled,\n      style,\n      value,\n      status,\n      onPress,\n      ...rest\n    } = this.props;\n    const borderRadius = theme.roundness;\n\n    return (\n      <ToggleButtonGroupContext.Consumer>\n        {(context: { value: string; onValueChange: Function } | null) => {\n          let backgroundColor;\n\n          const checked: boolean | null =\n            (context && context.value === value) || status === 'checked';\n\n          if (checked) {\n            backgroundColor = theme.dark\n              ? 'rgba(255, 255, 255, .12)'\n              : 'rgba(0, 0, 0, .08)';\n          } else {\n            backgroundColor = 'transparent';\n          }\n\n          return (\n            <IconButton\n              borderless={false}\n              icon={icon}\n              onPress={(e?: GestureResponderEvent | string) => {\n                if (onPress) {\n                  onPress(e);\n                }\n\n                if (context) {\n                  context.onValueChange(!checked ? value : null);\n                }\n              }}\n              size={size}\n              accessibilityLabel={accessibilityLabel}\n              disabled={disabled}\n              style={[\n                styles.content,\n                {\n                  backgroundColor,\n                  borderRadius,\n                  borderColor: color(theme.dark ? white : black)\n                    .alpha(0.29)\n                    .rgb()\n                    .string(),\n                },\n                style,\n              ]}\n              {...rest}\n            />\n          );\n        }}\n      </ToggleButtonGroupContext.Consumer>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"module"}