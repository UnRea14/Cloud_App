{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport MaterialCommunityIcon from \"../MaterialCommunityIcon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport { withTheme } from \"../../core/theming\";\nvar ANIMATION_DURATION = 100;\n\nvar CheckboxAndroid = function (_React$Component) {\n  _inherits(CheckboxAndroid, _React$Component);\n\n  var _super = _createSuper(CheckboxAndroid);\n\n  function CheckboxAndroid() {\n    var _this;\n\n    _classCallCheck(this, CheckboxAndroid);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      scaleAnim: new Animated.Value(1)\n    });\n\n    return _this;\n  }\n\n  _createClass(CheckboxAndroid, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.status === this.props.status) {\n        return;\n      }\n\n      var checked = this.props.status === 'checked';\n      var animation = this.props.theme.animation;\n      Animated.sequence([Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n        useNativeDriver: false\n      }), Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked ? ANIMATION_DURATION * animation.scale : ANIMATION_DURATION * animation.scale * 1.75,\n        useNativeDriver: false\n      })]).start();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          status = _this$props.status,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"status\", \"disabled\", \"onPress\", \"theme\"]);\n\n      var checked = status === 'checked';\n      var indeterminate = status === 'indeterminate';\n      var checkedColor = this.props.color || theme.colors.accent;\n      var uncheckedColor = this.props.uncheckedColor || color(theme.colors.text).alpha(theme.dark ? 0.7 : 0.54).rgb().string();\n      var rippleColor, checkboxColor;\n\n      if (disabled) {\n        rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n        checkboxColor = theme.colors.disabled;\n      } else {\n        rippleColor = color(checkedColor).fade(0.32).rgb().string();\n        checkboxColor = checked ? checkedColor : uncheckedColor;\n      }\n\n      var borderWidth = this.state.scaleAnim.interpolate({\n        inputRange: [0.8, 1],\n        outputRange: [7, 0]\n      });\n      var icon = indeterminate ? 'minus-box' : checked ? 'checkbox-marked' : 'checkbox-blank-outline';\n      return React.createElement(TouchableRipple, _extends({}, rest, {\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onPress,\n        disabled: disabled,\n        accessibilityTraits: disabled ? ['button', 'disabled'] : 'button',\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: disabled ? ['disabled'] : [],\n        accessibilityLiveRegion: \"polite\",\n        style: styles.container\n      }), React.createElement(Animated.View, {\n        style: {\n          transform: [{\n            scale: this.state.scaleAnim\n          }]\n        }\n      }, React.createElement(MaterialCommunityIcon, {\n        allowFontScaling: false,\n        name: icon,\n        size: 24,\n        color: checkboxColor,\n        direction: \"ltr\"\n      }), React.createElement(View, {\n        style: [StyleSheet.absoluteFill, styles.fillContainer]\n      }, React.createElement(Animated.View, {\n        style: [styles.fill, {\n          borderColor: checkboxColor\n        }, {\n          borderWidth: borderWidth\n        }]\n      }))));\n    }\n  }]);\n\n  return CheckboxAndroid;\n}(React.Component);\n\n_defineProperty(CheckboxAndroid, \"displayName\", 'Checkbox.Android');\n\nvar styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    height: 14,\n    width: 14\n  }\n});\nexport default withTheme(CheckboxAndroid);\nexport { CheckboxAndroid };","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","React","scaleAnim","Animated","componentDidUpdate","prevProps","checked","animation","toValue","duration","useNativeDriver","render","theme","status","indeterminate","checkedColor","uncheckedColor","color","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","disabled","styles","container","transform","scale","StyleSheet","borderColor","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAEA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,qBAAA;AACA,OAAA,eAAA;AACA,SAAA,SAAA;AAmCA,IAAMA,kBAAkB,GAAxB,GAAA;;IAiBA,e;;;;;EAA4D,2BAAA;IAAA;;IAAA;;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;;IAAA,gDAAA,IAAA;;IAAA,eAAA,gCAAA,OAAA,EAGlD;MACNG,SAAS,EAAE,IAAIC,QAAQ,CAAZ,KAAA,CAAA,CAAA;IADL,CAHkD,CAAA;;IAAA;EAAA;;;;WAO1DC,4BAAkB,SAAlBA,EAAqC;MACnC,IAAIC,SAAS,CAATA,MAAAA,KAAqB,KAAA,KAAA,CAAzB,MAAA,EAA4C;QAC1C;MACD;;MAED,IAAMC,OAAO,GAAG,KAAA,KAAA,CAAA,MAAA,KAAhB,SAAA;MACA,IAAQC,SAAR,GAAsB,KAAA,KAAA,CAAtB,KAAA,CAAQA,SAAR;MAEAJ,QAAQ,CAARA,QAAAA,CAAkB,CAChB,QAAQ,CAAR,MAAA,CAAgB,KAAA,KAAA,CAAhB,SAAA,EAAsC;QACpCK,OAAO,EAD6B,IAAA;QAEpCC,QAAQ,EAAEH,OAAO,GAAGP,kBAAkB,GAAGQ,SAAS,CAAjC,KAAA,GAFmB,CAAA;QAGpCG,eAAe,EAAE;MAHmB,CAAtC,CADgB,EAMhB,QAAQ,CAAR,MAAA,CAAgB,KAAA,KAAA,CAAhB,SAAA,EAAsC;QACpCF,OAAO,EAD6B,CAAA;QAEpCC,QAAQ,EAAEH,OAAO,GACbP,kBAAkB,GAAGQ,SAAS,CADjB,KAAA,GAEbR,kBAAkB,GAAGQ,SAAS,CAA9BR,KAAAA,GAJgC,IAAA;QAKpCW,eAAe,EAAE;MALmB,CAAtC,CANgB,CAAlBP,EAAAA,KAAAA;IAcD;;;WAEDQ,kBAAS;MACP,IAAA,WAAA,GAAsD,KAAtD,KAAA;MAAA,IAAM,MAAN,GAAA,WAAA,CAAM,MAAN;MAAA,IAAM,QAAN,GAAA,WAAA,CAAM,QAAN;MAAA,IAAM,OAAN,GAAA,WAAA,CAAM,OAAN;MAAA,IAAmCC,KAAnC,GAAA,WAAA,CAAmCA,KAAnC;MAAA,IAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,QAAA,EAAA,UAAA,EAAA,SAAA,EAAA,OAAA,CAAA,CAAA;;MACA,IAAMN,OAAO,GAAGO,MAAM,KAAtB,SAAA;MACA,IAAMC,aAAa,GAAGD,MAAM,KAA5B,eAAA;MACA,IAAME,YAAY,GAAG,KAAA,KAAA,CAAA,KAAA,IAAoBH,KAAK,CAALA,MAAAA,CAAzC,MAAA;MACA,IAAMI,cAAc,GAClB,KAAA,KAAA,CAAA,cAAA,IACAC,KAAK,CAACL,KAAK,CAALA,MAAAA,CAANK,IAAK,CAALA,CAAAA,KAAAA,CACSL,KAAK,CAALA,IAAAA,GAAAA,GAAAA,GADTK,IAAAA,EAAAA,GAAAA,GAFF,MAEEA,EAFF;MAOA,IAAA,WAAA,EAAA,aAAA;;MAEA,IAAA,QAAA,EAAc;QACZC,WAAW,GAAGD,KAAK,CAACL,KAAK,CAALA,MAAAA,CAANK,IAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdC,MAAcD,EAAdC;QAIAC,aAAa,GAAGP,KAAK,CAALA,MAAAA,CAAhBO,QAAAA;MALF,CAAA,MAMO;QACLD,WAAW,GAAGD,KAAK,CAALA,YAAK,CAALA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAdC,MAAcD,EAAdC;QAIAC,aAAa,GAAGb,OAAO,GAAA,YAAA,GAAvBa,cAAAA;MACD;;MAED,IAAMC,WAAW,GAAG,KAAA,KAAA,CAAA,SAAA,CAAA,WAAA,CAAiC;QACnDC,UAAU,EAAE,CAAA,GAAA,EADuC,CACvC,CADuC;QAEnDC,WAAW,EAAE,CAAA,CAAA,EAAA,CAAA;MAFsC,CAAjC,CAApB;MAKA,IAAMC,IAAI,GAAGT,aAAa,GAAA,WAAA,GAEtBR,OAAO,GAAA,iBAAA,GAFX,wBAAA;MAMA,OACE,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,UAAU,EAFZ,IAAA;QAGE,WAAW,EAHb,WAAA;QAIE,OAAO,EAJT,OAAA;QAKE,QAAQ,EALV,QAAA;QAME,mBAAmB,EAAEkB,QAAQ,GAAG,CAAA,QAAA,EAAH,UAAG,CAAH,GAN/B,QAAA;QAOE,0BAA0B,EAP5B,QAAA;QAQE,iBAAiB,EARnB,QAAA;QASE,mBAAmB,EAAEA,QAAQ,GAAG,CAAH,UAAG,CAAH,GAT/B,EAAA;QAUE,uBAAuB,EAVzB,QAAA;QAWE,KAAK,EAAEC,MAAM,CAACC;MAXhB,CAAA,CAAA,EAaE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QAAe,KAAK,EAAE;UAAEC,SAAS,EAAE,CAAC;YAAEC,KAAK,EAAE,KAAA,KAAA,CAAW1B;UAApB,CAAD;QAAb;MAAtB,CAAA,EACE,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;QACE,gBAAgB,EADlB,KAAA;QAEE,IAAI,EAFN,IAAA;QAGE,IAAI,EAHN,EAAA;QAIE,KAAK,EAJP,aAAA;QAKE,SAAS,EAAC;MALZ,CAAA,CADF,EAQE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;QAAM,KAAK,EAAE,CAAC2B,UAAU,CAAX,YAAA,EAA0BJ,MAAM,CAAhC,aAAA;MAAb,CAAA,EACE,KAAA,CAAA,aAAA,CAAC,QAAD,CAAA,IAAA,EAAA;QACE,KAAK,EAAE,CACLA,MAAM,CADD,IAAA,EAEL;UAAEK,WAAW,EAAEX;QAAf,CAFK,EAGL;UAAEC,WAAAA,EAAAA;QAAF,CAHK;MADT,CAAA,CADF,CARF,CAbF,CADF;IAkCD;;;;EAxG2BnB,KAAK,CAAnC,S;;gBAAMD,e,iBACiB,kB;;AA0GvB,IAAMyB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,SAAS,EAAE;IACTK,YAAY,EADH,EAAA;IAETC,KAAK,EAFI,EAAA;IAGTC,MAAM,EAHG,EAAA;IAITC,OAAO,EAAE;EAJA,CADoB;EAO/BC,aAAa,EAAE;IACbC,UAAU,EADG,QAAA;IAEbC,cAAc,EAAE;EAFH,CAPgB;EAW/BC,IAAI,EAAE;IACJL,MAAM,EADF,EAAA;IAEJD,KAAK,EAAE;EAFH;AAXyB,CAAlB,CAAf;AAiBA,eAAeO,SAAS,CAAxB,eAAwB,CAAxB;AAGA,SAAA,eAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport { Theme, $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  scaleAnim: Animated.Value;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nclass CheckboxAndroid extends React.Component<Props, State> {\n  static displayName = 'Checkbox.Android';\n\n  state = {\n    scaleAnim: new Animated.Value(1),\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.status === this.props.status) {\n      return;\n    }\n\n    const checked = this.props.status === 'checked';\n    const { animation } = this.props.theme;\n\n    Animated.sequence([\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * animation.scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(this.state.scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * animation.scale\n          : ANIMATION_DURATION * animation.scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }\n\n  render() {\n    const { status, disabled, onPress, theme, ...rest } = this.props;\n    const checked = status === 'checked';\n    const indeterminate = status === 'indeterminate';\n    const checkedColor = this.props.color || theme.colors.accent;\n    const uncheckedColor =\n      this.props.uncheckedColor ||\n      color(theme.colors.text)\n        .alpha(theme.dark ? 0.7 : 0.54)\n        .rgb()\n        .string();\n\n    let rippleColor, checkboxColor;\n\n    if (disabled) {\n      rippleColor = color(theme.colors.text)\n        .alpha(0.16)\n        .rgb()\n        .string();\n      checkboxColor = theme.colors.disabled;\n    } else {\n      rippleColor = color(checkedColor)\n        .fade(0.32)\n        .rgb()\n        .string();\n      checkboxColor = checked ? checkedColor : uncheckedColor;\n    }\n\n    const borderWidth = this.state.scaleAnim.interpolate({\n      inputRange: [0.8, 1],\n      outputRange: [7, 0],\n    });\n\n    const icon = indeterminate\n      ? 'minus-box'\n      : checked\n      ? 'checkbox-marked'\n      : 'checkbox-blank-outline';\n\n    return (\n      <TouchableRipple\n        {...rest}\n        borderless\n        rippleColor={rippleColor}\n        onPress={onPress}\n        disabled={disabled}\n        accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={disabled ? ['disabled'] : []}\n        accessibilityLiveRegion=\"polite\"\n        style={styles.container}\n      >\n        <Animated.View style={{ transform: [{ scale: this.state.scaleAnim }] }}>\n          <MaterialCommunityIcon\n            allowFontScaling={false}\n            name={icon}\n            size={24}\n            color={checkboxColor}\n            direction=\"ltr\"\n          />\n          <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n            <Animated.View\n              style={[\n                styles.fill,\n                { borderColor: checkboxColor },\n                { borderWidth },\n              ]}\n            />\n          </View>\n        </Animated.View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"module"}