{"ast":null,"code":"import color from 'color';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport DarkTheme from \"./DarkTheme\";\nexport default function overlay() {\n  var elevation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var surfaceColor = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DarkTheme.colors.surface;\n\n  if (elevation instanceof Animated.Value) {\n    var inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange: inputRange,\n      outputRange: inputRange.map(function (elevation) {\n        return calculateColor(surfaceColor, elevation);\n      })\n    });\n  }\n\n  return calculateColor(surfaceColor, elevation);\n}\n\nfunction calculateColor(surfaceColor, elevation) {\n  var overlayTransparency;\n\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n\n  return color(surfaceColor).mix(color('white'), overlayTransparency * 0.01).hex();\n}\n\nvar elevationOverlayTransparency = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16\n};","map":{"version":3,"sources":["overlay.tsx"],"names":["elevation","surfaceColor","DarkTheme","Animated","inputRange","outputRange","calculateColor","overlayTransparency","elevationOverlayTransparency","color"],"mappings":"AAAA,OAAA,KAAA,MAAA,OAAA;;AAEA,OAAA,SAAA;AAEA,eAAe,SAAA,OAAA,GAGb;EAAA,IAFAA,SAEA,uEAHa,CAGb;EAAA,IADAC,YACA,uEADuBC,SAAS,CAATA,MAAAA,CAFV,OAGb;;EACA,IAAIF,SAAS,YAAYG,QAAQ,CAAjC,KAAA,EAAyC;IACvC,IAAMC,UAAU,GAAG,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAnB,EAAmB,CAAnB;IACA,OAAO,SAAS,CAAT,WAAA,CAAsB;MAC3BA,UAD2B,EAC3BA,UAD2B;MAE3BC,WAAW,EAAE,UAAU,CAAV,GAAA,CAAeL,UAAAA,SAAS,EAAI;QACvC,OAAOM,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;MADW,CAAA;IAFc,CAAtB,CAAP;EAMD;;EACD,OAAOA,cAAc,CAAA,YAAA,EAArB,SAAqB,CAArB;AACD;;AACD,SAAA,cAAA,CAAA,YAAA,EAAA,SAAA,EAAiE;EAC/D,IAAA,mBAAA;;EACA,IAAIN,SAAS,IAATA,CAAAA,IAAkBA,SAAS,IAA/B,EAAA,EAAuC;IACrCO,mBAAmB,GAAGC,4BAA4B,CAAlDD,SAAkD,CAAlDA;EADF,CAAA,MAEO,IAAIP,SAAS,GAAb,EAAA,EAAoB;IACzBO,mBAAmB,GAAGC,4BAA4B,CAAlDD,EAAkD,CAAlDA;EADK,CAAA,MAEA;IACLA,mBAAmB,GAAGC,4BAA4B,CAAlDD,CAAkD,CAAlDA;EACD;;EACD,OAAOE,KAAK,CAALA,YAAK,CAALA,CAAAA,GAAAA,CACAA,KAAK,CADLA,OACK,CADLA,EACgBF,mBAAmB,GADnCE,IAAAA,EAAP,GAAOA,EAAP;AAGD;;AACD,IAAMD,4BAAsD,GAAG;EAC7D,GAD6D,CAAA;EAE7D,GAF6D,CAAA;EAG7D,GAH6D,CAAA;EAI7D,GAJ6D,CAAA;EAK7D,GAL6D,EAAA;EAM7D,GAN6D,EAAA;EAO7D,GAP6D,IAAA;EAQ7D,GAR6D,EAAA;EAS7D,GAT6D,IAAA;EAU7D,IAV6D,EAAA;EAW7D,IAX6D,IAAA;EAY7D,IAZ6D,EAAA;EAa7D,IAb6D,KAAA;EAc7D,IAd6D,IAAA;EAe7D,IAf6D,KAAA;EAgB7D,IAhB6D,EAAA;EAiB7D,IAjB6D,KAAA;EAkB7D,IAlB6D,KAAA;EAmB7D,IAnB6D,KAAA;EAoB7D,IApB6D,KAAA;EAqB7D,IArB6D,IAAA;EAsB7D,IAtB6D,KAAA;EAuB7D,IAvB6D,KAAA;EAwB7D,IAAI;AAxByD,CAA/D","sourcesContent":["import color from 'color';\nimport { Animated } from 'react-native';\nimport DarkTheme from './DarkTheme';\n\nexport default function overlay(\n  elevation: number | Animated.Value = 1,\n  surfaceColor: string = DarkTheme.colors.surface\n) {\n  if (elevation instanceof Animated.Value) {\n    const inputRange = [0, 1, 2, 3, 8, 24];\n    return elevation.interpolate({\n      inputRange,\n      outputRange: inputRange.map(elevation => {\n        return calculateColor(surfaceColor, elevation);\n      }),\n    });\n  }\n  return calculateColor(surfaceColor, elevation);\n}\nfunction calculateColor(surfaceColor: string, elevation: number) {\n  let overlayTransparency: number;\n  if (elevation >= 1 && elevation <= 24) {\n    overlayTransparency = elevationOverlayTransparency[elevation];\n  } else if (elevation > 24) {\n    overlayTransparency = elevationOverlayTransparency[24];\n  } else {\n    overlayTransparency = elevationOverlayTransparency[1];\n  }\n  return color(surfaceColor)\n    .mix(color('white'), overlayTransparency * 0.01)\n    .hex();\n}\nconst elevationOverlayTransparency: { [id: number]: number } = {\n  1: 5,\n  2: 7,\n  3: 8,\n  4: 9,\n  5: 10,\n  6: 11,\n  7: 11.5,\n  8: 12,\n  9: 12.5,\n  10: 13,\n  11: 13.5,\n  12: 14,\n  13: 14.25,\n  14: 14.5,\n  15: 14.75,\n  16: 15,\n  17: 15.12,\n  18: 15.24,\n  19: 15.36,\n  20: 15.48,\n  21: 15.6,\n  22: 15.72,\n  23: 15.84,\n  24: 16,\n};\n"]},"metadata":{},"sourceType":"module"}