{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport color from 'color';\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Text from \"./Typography/Text\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport { withTheme } from \"../core/theming\";\nimport { black, white } from \"../styles/colors\";\n\nvar Chip = function (_React$Component) {\n  _inherits(Chip, _React$Component);\n\n  var _super = _createSuper(Chip);\n\n  function Chip() {\n    var _this;\n\n    _classCallCheck(this, Chip);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      elevation: new Animated.Value(0)\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressIn\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.elevation, {\n        toValue: 4,\n        duration: 200 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressOut\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.elevation, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: false\n      }).start();\n    });\n\n    return _this;\n  }\n\n  _createClass(Chip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          mode = _this$props.mode,\n          children = _this$props.children,\n          icon = _this$props.icon,\n          avatar = _this$props.avatar,\n          selected = _this$props.selected,\n          disabled = _this$props.disabled,\n          accessibilityLabel = _this$props.accessibilityLabel,\n          onPress = _this$props.onPress,\n          onLongPress = _this$props.onLongPress,\n          onClose = _this$props.onClose,\n          textStyle = _this$props.textStyle,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          testID = _this$props.testID,\n          selectedColor = _this$props.selectedColor,\n          rest = _objectWithoutProperties(_this$props, [\"mode\", \"children\", \"icon\", \"avatar\", \"selected\", \"disabled\", \"accessibilityLabel\", \"onPress\", \"onLongPress\", \"onClose\", \"textStyle\", \"style\", \"theme\", \"testID\", \"selectedColor\"]);\n\n      var dark = theme.dark,\n          colors = theme.colors;\n\n      var _ref = StyleSheet.flatten(style) || {},\n          _ref$backgroundColor = _ref.backgroundColor,\n          backgroundColor = _ref$backgroundColor === void 0 ? mode === 'outlined' ? colors.surface : dark ? '#383838' : '#ebebeb' : _ref$backgroundColor,\n          _ref$borderRadius = _ref.borderRadius,\n          borderRadius = _ref$borderRadius === void 0 ? 16 : _ref$borderRadius;\n\n      var borderColor = mode === 'outlined' ? color(selectedColor !== undefined ? selectedColor : color(dark ? white : black)).alpha(0.29).rgb().string() : backgroundColor;\n      var textColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? colors.disabled : color(selectedColor !== undefined ? selectedColor : colors.text).alpha(0.54).rgb().string();\n      var selectedBackgroundColor = (dark ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4) : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)).rgb().string();\n      var underlayColor = selectedColor ? color(selectedColor).fade(0.5).rgb().string() : selectedBackgroundColor;\n      var accessibilityTraits = ['button'];\n      var accessibilityStates = [];\n\n      if (selected) {\n        accessibilityTraits.push('selected');\n        accessibilityStates.push('selected');\n      }\n\n      if (disabled) {\n        accessibilityTraits.push('disabled');\n        accessibilityStates.push('disabled');\n      }\n\n      return React.createElement(Surface, _extends({\n        style: [styles.container, {\n          elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n          backgroundColor: selected ? selectedBackgroundColor : backgroundColor,\n          borderColor: borderColor,\n          borderRadius: borderRadius\n        }, style]\n      }, rest), React.createElement(TouchableRipple, {\n        borderless: true,\n        delayPressIn: 0,\n        style: {\n          borderRadius: borderRadius\n        },\n        onPress: onPress,\n        onLongPress: onLongPress,\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        underlayColor: underlayColor,\n        disabled: disabled,\n        accessibilityLabel: accessibilityLabel,\n        accessibilityTraits: accessibilityTraits,\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        accessibilityStates: accessibilityStates,\n        testID: testID\n      }, React.createElement(View, {\n        style: styles.content\n      }, avatar && !icon ? React.createElement(View, {\n        style: [styles.avatarWrapper, disabled && {\n          opacity: 0.26\n        }]\n      }, React.isValidElement(avatar) ? React.cloneElement(avatar, {\n        style: [styles.avatar, avatar.props.style]\n      }) : avatar) : null, icon || selected ? React.createElement(View, {\n        style: [styles.icon, avatar ? [styles.avatar, styles.avatarSelected] : null]\n      }, React.createElement(Icon, {\n        source: icon || 'check',\n        color: avatar ? white : iconColor,\n        size: 18\n      })) : null, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.text, _objectSpread(_objectSpread({}, theme.fonts.regular), {}, {\n          color: textColor,\n          marginRight: onClose ? 4 : 8,\n          marginLeft: avatar || icon || selected ? 4 : 8\n        }), textStyle]\n      }, children), onClose ? React.createElement(TouchableWithoutFeedback, {\n        onPress: onClose,\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\"\n      }, React.createElement(View, {\n        style: styles.icon\n      }, React.createElement(Icon, {\n        source: \"close-circle\",\n        size: 16,\n        color: iconColor\n      }))) : null)));\n    }\n  }]);\n\n  return Chip;\n}(React.Component);\n\n_defineProperty(Chip, \"defaultProps\", {\n  mode: 'flat',\n  disabled: false,\n  selected: false\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid'\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4\n  },\n  icon: {\n    padding: 4\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12\n  },\n  avatarWrapper: {\n    marginRight: 4\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)'\n  }\n});\nexport default withTheme(Chip);","map":{"version":3,"sources":["Chip.tsx"],"names":["Chip","React","mode","disabled","selected","elevation","Animated","scale","toValue","duration","useNativeDriver","render","selectedColor","colors","backgroundColor","dark","borderRadius","StyleSheet","borderColor","color","textColor","iconColor","selectedBackgroundColor","underlayColor","accessibilityTraits","accessibilityStates","styles","Platform","testID","content","avatar","opacity","style","icon","theme","marginRight","onClose","marginLeft","container","borderWidth","borderStyle","flexDirection","alignItems","paddingHorizontal","padding","text","minHeight","lineHeight","textAlignVertical","marginVertical","width","height","avatarWrapper","avatarSelected","position","top","left","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityState,\n  AccessibilityTrait,\n  Animated,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from 'react-native';\nimport color from 'color';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Text from './Typography/Text';\nimport TouchableRipple from './TouchableRipple';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport { Theme } from '../types';\n\ntype Props = React.ComponentProps<typeof Surface> & {\n  /**\n   * Mode of the chip.\n   * - `flat` - flat chip without outline.\n   * - `outlined` - chip with an outline.\n   */\n  mode?: 'flat' | 'outlined';\n  /**\n   * Text content of the `Chip`.\n   */\n  children: React.ReactNode;\n  /**\n   * Icon to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  icon?: IconSource;\n  /**\n   * Avatar to display for the `Chip`. Both icon and avatar cannot be specified.\n   */\n  avatar?: React.ReactNode;\n  /**\n   * Whether chip is selected.\n   */\n  selected?: boolean;\n  /**\n   * Whether to style the chip color as selected.\n   */\n  selectedColor?: string;\n  /**\n   * Whether the chip is disabled. A disabled chip is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the chip. This is read by the screen reader when the user taps the chip.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: () => void;\n  /**\n   * Function to execute on close button press. The close button appears only when this prop is specified.\n   */\n  onClose?: () => void;\n  /**\n   * Style of chip's text\n   */\n  textStyle?: any;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Pass down testID from chip props to touchable for Detox tests.\n   */\n  testID?: string;\n};\n\ntype State = {\n  elevation: Animated.Value;\n};\n\n/**\n * Chips can be used to display entities in small blocks.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-1.png\" />\n *     <figcaption>Flat chip</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/chip-2.png\" />\n *     <figcaption>Outlined chip</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Chip } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Chip icon=\"information\" onPress={() => console.log('Pressed')}>Example Chip</Chip>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass Chip extends React.Component<Props, State> {\n  static defaultProps: Partial<Props> = {\n    mode: 'flat',\n    disabled: false,\n    selected: false,\n  };\n\n  state = {\n    elevation: new Animated.Value(0),\n  };\n\n  private handlePressIn = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 4,\n      duration: 200 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  private handlePressOut = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.elevation, {\n      toValue: 0,\n      duration: 150 * scale,\n      useNativeDriver: false,\n    }).start();\n  };\n\n  render() {\n    const {\n      mode,\n      children,\n      icon,\n      avatar,\n      selected,\n      disabled,\n      accessibilityLabel,\n      onPress,\n      onLongPress,\n      onClose,\n      textStyle,\n      style,\n      theme,\n      testID,\n      selectedColor,\n      ...rest\n    } = this.props;\n    const { dark, colors } = theme;\n\n    const {\n      backgroundColor = mode === 'outlined'\n        ? colors.surface\n        : dark\n        ? '#383838'\n        : '#ebebeb',\n      borderRadius = 16,\n    } = StyleSheet.flatten(style) || {};\n\n    const borderColor =\n      mode === 'outlined'\n        ? color(\n            selectedColor !== undefined\n              ? selectedColor\n              : color(dark ? white : black)\n          )\n            .alpha(0.29)\n            .rgb()\n            .string()\n        : backgroundColor;\n    const textColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n    const iconColor = disabled\n      ? colors.disabled\n      : color(selectedColor !== undefined ? selectedColor : colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n    const selectedBackgroundColor = (dark\n      ? color(backgroundColor).lighten(mode === 'outlined' ? 0.2 : 0.4)\n      : color(backgroundColor).darken(mode === 'outlined' ? 0.08 : 0.2)\n    )\n      .rgb()\n      .string();\n\n    const underlayColor = selectedColor\n      ? color(selectedColor)\n          .fade(0.5)\n          .rgb()\n          .string()\n      : selectedBackgroundColor;\n\n    const accessibilityTraits: AccessibilityTrait[] = ['button'];\n    const accessibilityStates: AccessibilityState[] = [];\n\n    if (selected) {\n      accessibilityTraits.push('selected');\n      accessibilityStates.push('selected');\n    }\n\n    if (disabled) {\n      accessibilityTraits.push('disabled');\n      accessibilityStates.push('disabled');\n    }\n\n    return (\n      <Surface\n        style={\n          [\n            styles.container,\n            {\n              elevation: Platform.OS === 'android' ? this.state.elevation : 0,\n              backgroundColor: selected\n                ? selectedBackgroundColor\n                : backgroundColor,\n              borderColor,\n              borderRadius,\n            },\n            style,\n          ] as StyleProp<ViewStyle>\n        }\n        {...rest}\n      >\n        <TouchableRipple\n          borderless\n          delayPressIn={0}\n          style={{ borderRadius }}\n          onPress={onPress}\n          onLongPress={onLongPress}\n          onPressIn={this.handlePressIn}\n          onPressOut={this.handlePressOut}\n          underlayColor={underlayColor}\n          disabled={disabled}\n          accessibilityLabel={accessibilityLabel}\n          accessibilityTraits={accessibilityTraits}\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          accessibilityStates={accessibilityStates}\n          testID={testID}\n        >\n          <View style={styles.content}>\n            {avatar && !icon ? (\n              <View\n                style={[styles.avatarWrapper, disabled && { opacity: 0.26 }]}\n              >\n                {React.isValidElement(avatar)\n                  ? /* $FlowFixMe */\n                    React.cloneElement(avatar, {\n                      /* $FlowFixMe */\n                      style: [styles.avatar, avatar.props.style],\n                    })\n                  : avatar}\n              </View>\n            ) : null}\n            {icon || selected ? (\n              <View\n                style={[\n                  styles.icon,\n                  avatar ? [styles.avatar, styles.avatarSelected] : null,\n                ]}\n              >\n                <Icon\n                  source={icon || 'check'}\n                  color={avatar ? white : iconColor}\n                  size={18}\n                />\n              </View>\n            ) : null}\n            <Text\n              numberOfLines={1}\n              style={[\n                styles.text,\n                {\n                  ...theme.fonts.regular,\n                  color: textColor,\n                  marginRight: onClose ? 4 : 8,\n                  marginLeft: avatar || icon || selected ? 4 : 8,\n                },\n                textStyle,\n              ]}\n            >\n              {children}\n            </Text>\n            {onClose ? (\n              <TouchableWithoutFeedback\n                onPress={onClose}\n                accessibilityTraits=\"button\"\n                accessibilityComponentType=\"button\"\n              >\n                <View style={styles.icon}>\n                  <Icon source=\"close-circle\" size={16} color={iconColor} />\n                </View>\n              </TouchableWithoutFeedback>\n            ) : null}\n          </View>\n        </TouchableRipple>\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    borderWidth: StyleSheet.hairlineWidth,\n    borderStyle: 'solid',\n  },\n  content: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingHorizontal: 4,\n  },\n  icon: {\n    padding: 4,\n  },\n  text: {\n    minHeight: 24,\n    lineHeight: 24,\n    textAlignVertical: 'center',\n    marginVertical: 4,\n  },\n  avatar: {\n    width: 24,\n    height: 24,\n    borderRadius: 12,\n  },\n  avatarWrapper: {\n    marginRight: 4,\n  },\n  avatarSelected: {\n    position: 'absolute',\n    top: 4,\n    left: 4,\n    backgroundColor: 'rgba(0, 0, 0, .29)',\n  },\n});\n\nexport default withTheme(Chip);\n"]},"metadata":{},"sourceType":"module"}