{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport color from 'color';\nimport { withTheme } from \"../../core/theming\";\n\nvar TouchableRipple = function (_React$Component) {\n  _inherits(TouchableRipple, _React$Component);\n\n  var _super = _createSuper(TouchableRipple);\n\n  function TouchableRipple() {\n    var _this;\n\n    _classCallCheck(this, TouchableRipple);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressIn\", function (e) {\n      var _this$props2 = _this.props,\n          centered = _this$props2.centered,\n          rippleColor = _this$props2.rippleColor,\n          onPressIn = _this$props2.onPressIn,\n          theme = _this$props2.theme;\n      onPressIn === null || onPressIn === void 0 ? void 0 : onPressIn(e);\n      var dark = theme.dark,\n          colors = theme.colors;\n      var calculatedRippleColor = rippleColor || color(colors.text).alpha(dark ? 0.32 : 0.2).rgb().string();\n      var button = e.currentTarget;\n      var style = window.getComputedStyle(button);\n      var dimensions = button.getBoundingClientRect();\n      var touchX;\n      var touchY;\n\n      if (centered) {\n        touchX = dimensions.width / 2;\n        touchY = dimensions.height / 2;\n      } else {\n        var _touches$, _touch$pageX, _touch$pageY;\n\n        var _e$nativeEvent = e.nativeEvent,\n            changedTouches = _e$nativeEvent.changedTouches,\n            touches = _e$nativeEvent.touches;\n        var touch = (_touches$ = touches === null || touches === void 0 ? void 0 : touches[0]) !== null && _touches$ !== void 0 ? _touches$ : changedTouches === null || changedTouches === void 0 ? void 0 : changedTouches[0];\n        var startX = (_touch$pageX = touch.pageX) !== null && _touch$pageX !== void 0 ? _touch$pageX : e.pageX;\n        var startY = (_touch$pageY = touch.pageY) !== null && _touch$pageY !== void 0 ? _touch$pageY : e.pageY;\n        touchX = startX - dimensions.left;\n        touchY = startY - dimensions.top;\n      }\n\n      var size = centered ? Math.min(dimensions.width, dimensions.height) * 1.25 : Math.max(dimensions.width, dimensions.height) * 2;\n      var container = document.createElement('span');\n      container.setAttribute('data-paper-ripple', '');\n\n      _extends2(container.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        borderTopLeftRadius: style.borderTopLeftRadius,\n        borderTopRightRadius: style.borderTopRightRadius,\n        borderBottomRightRadius: style.borderBottomRightRadius,\n        borderBottomLeftRadius: style.borderBottomLeftRadius,\n        overflow: centered ? 'visible' : 'hidden'\n      });\n\n      var ripple = document.createElement('span');\n\n      _extends2(ripple.style, {\n        position: 'absolute',\n        pointerEvents: 'none',\n        backgroundColor: calculatedRippleColor,\n        borderRadius: '50%',\n        transitionProperty: 'transform opacity',\n        transitionDuration: \"\".concat(Math.min(size * 1.5, 350), \"ms\"),\n        transitionTimingFunction: 'linear',\n        transformOrigin: 'center',\n        transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n        opacity: '0.5',\n        left: \"\".concat(touchX, \"px\"),\n        top: \"\".concat(touchY, \"px\"),\n        width: \"\".concat(size, \"px\"),\n        height: \"\".concat(size, \"px\")\n      });\n\n      container.appendChild(ripple);\n      button.appendChild(container);\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          _extends2(ripple.style, {\n            transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n            opacity: '1'\n          });\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handlePressOut\", function (e) {\n      _this.props.onPressOut && _this.props.onPressOut(e);\n      var containers = e.currentTarget.querySelectorAll('[data-paper-ripple]');\n      requestAnimationFrame(function () {\n        requestAnimationFrame(function () {\n          containers.forEach(function (container) {\n            var ripple = container.firstChild;\n\n            _extends2(ripple.style, {\n              transitionDuration: '250ms',\n              opacity: 0\n            });\n\n            setTimeout(function () {\n              var parentNode = container.parentNode;\n\n              if (parentNode) {\n                parentNode.removeChild(container);\n              }\n            }, 500);\n          });\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(TouchableRipple, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          style = _this$props.style,\n          background = _this$props.background,\n          borderless = _this$props.borderless,\n          disabledProp = _this$props.disabled,\n          rippleColor = _this$props.rippleColor,\n          underlayColor = _this$props.underlayColor,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          rest = _objectWithoutProperties(_this$props, [\"style\", \"background\", \"borderless\", \"disabled\", \"rippleColor\", \"underlayColor\", \"children\", \"theme\"]);\n\n      var disabled = disabledProp || !this.props.onPress;\n      return React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        onPressIn: this.handlePressIn,\n        onPressOut: this.handlePressOut,\n        disabled: disabled\n      }), React.createElement(View, {\n        style: [styles.touchable, borderless && styles.borderless, style]\n      }, React.Children.only(children)));\n    }\n  }]);\n\n  return TouchableRipple;\n}(React.Component);\n\n_defineProperty(TouchableRipple, \"defaultProps\", {\n  borderless: false\n});\n\n_defineProperty(TouchableRipple, \"supported\", true);\n\nvar styles = StyleSheet.create({\n  touchable: {\n    position: 'relative'\n  },\n  borderless: {\n    overflow: 'hidden'\n  }\n});\nexport default withTheme(TouchableRipple);","map":{"version":3,"sources":["index.tsx"],"names":["TouchableRipple","React","borderless","e","theme","onPressIn","colors","calculatedRippleColor","rippleColor","color","dark","button","style","window","dimensions","touchX","touchY","touches","touch","changedTouches","startX","startY","size","centered","Math","container","document","Object","position","pointerEvents","top","left","right","bottom","borderTopLeftRadius","borderTopRightRadius","borderBottomRightRadius","borderBottomLeftRadius","overflow","ripple","backgroundColor","borderRadius","transitionProperty","transitionDuration","transitionTimingFunction","transformOrigin","transform","opacity","width","height","requestAnimationFrame","containers","setTimeout","parentNode","render","disabled","disabledProp","styles","touchable","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n  StyleSheet,\n  StyleProp,\n  GestureResponderEvent,\n} from 'react-native';\nimport color from 'color';\nimport { withTheme } from '../../core/theming';\nimport { Theme } from '../../types';\n\ntype Props = React.ComponentPropsWithRef<typeof TouchableWithoutFeedback> & {\n  /**\n   * Whether to render the ripple outside the view bounds.\n   */\n  borderless?: boolean;\n  /**\n   * Type of background drawabale to display the feedback (Android).\n   * https://facebook.github.io/react-native/docs/touchablenativefeedback.html#background\n   */\n  background?: Object;\n  /**\n   * Whether to start the ripple at the center (Web).\n   */\n  centered?: boolean;\n  /**\n   * Whether to prevent interaction with the touchable.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press. If not set, will cause the touchable to be disabled.\n   */\n  onPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress?: (e: GestureResponderEvent) => void;\n  /**\n   * Color of the ripple effect (Android >= 5.0 and Web).\n   */\n  rippleColor?: string;\n  /**\n   * Color of the underlay for the highlight effect (Android < 5.0 and iOS).\n   */\n  underlayColor?: string;\n  /**\n   * Content of the `TouchableRipple`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\n/**\n * A wrapper for views that should respond to touches.\n * Provides a material \"ink ripple\" interaction effect for supported platforms (>= Android Lollipop).\n * On unsupported platforms, it falls back to a highlight effect.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/touchable-ripple.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Text, TouchableRipple } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <TouchableRipple\n *     onPress={() => console.log('Pressed')}\n *     rippleColor=\"rgba(0, 0, 0, .32)\"\n *   >\n *     <Text>Press anywhere</Text>\n *   </TouchableRipple>\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass TouchableRipple extends React.Component<Props> {\n  static defaultProps = {\n    borderless: false,\n  };\n\n  /**\n   * Whether ripple effect is supported.\n   */\n  static supported = true;\n\n  private handlePressIn = (e: any) => {\n    const { centered, rippleColor, onPressIn, theme } = this.props;\n\n    onPressIn?.(e);\n\n    const { dark, colors } = theme;\n    const calculatedRippleColor =\n      rippleColor ||\n      color(colors.text)\n        .alpha(dark ? 0.32 : 0.2)\n        .rgb()\n        .string();\n\n    const button = e.currentTarget;\n    const style = window.getComputedStyle(button);\n    const dimensions = button.getBoundingClientRect();\n\n    let touchX;\n    let touchY;\n\n    if (centered) {\n      touchX = dimensions.width / 2;\n      touchY = dimensions.height / 2;\n    } else {\n      const { changedTouches, touches } = e.nativeEvent;\n      const touch = touches?.[0] ?? changedTouches?.[0];\n      const startX = touch.pageX ?? e.pageX;\n      const startY = touch.pageY ?? e.pageY;\n\n      touchX = startX - dimensions.left;\n      touchY = startY - dimensions.top;\n    }\n\n    // Get the size of the button to determine how big the ripple should be\n    const size = centered\n      ? // If ripple is always centered, we don't need to make it too big\n        Math.min(dimensions.width, dimensions.height) * 1.25\n      : // Otherwise make it twice as big so clicking on one end spreads ripple to other\n        Math.max(dimensions.width, dimensions.height) * 2;\n\n    // Create a container for our ripple effect so we don't need to change the parent's style\n    const container = document.createElement('span');\n\n    container.setAttribute('data-paper-ripple', '');\n\n    Object.assign(container.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      top: '0',\n      left: '0',\n      right: '0',\n      bottom: '0',\n      borderTopLeftRadius: style.borderTopLeftRadius,\n      borderTopRightRadius: style.borderTopRightRadius,\n      borderBottomRightRadius: style.borderBottomRightRadius,\n      borderBottomLeftRadius: style.borderBottomLeftRadius,\n      overflow: centered ? 'visible' : 'hidden',\n    });\n\n    // Create span to show the ripple effect\n    const ripple = document.createElement('span');\n\n    Object.assign(ripple.style, {\n      position: 'absolute',\n      pointerEvents: 'none',\n      backgroundColor: calculatedRippleColor,\n      borderRadius: '50%',\n\n      /* Transition configuration */\n      transitionProperty: 'transform opacity',\n      transitionDuration: `${Math.min(size * 1.5, 350)}ms`,\n      transitionTimingFunction: 'linear',\n      transformOrigin: 'center',\n\n      /* We'll animate these properties */\n      transform: 'translate3d(-50%, -50%, 0) scale3d(0.1, 0.1, 0.1)',\n      opacity: '0.5',\n\n      // Position the ripple where cursor was\n      left: `${touchX}px`,\n      top: `${touchY}px`,\n      width: `${size}px`,\n      height: `${size}px`,\n    });\n\n    // Finally, append it to DOM\n    container.appendChild(ripple);\n    button.appendChild(container);\n\n    // rAF runs in the same frame as the event handler\n    // Use double rAF to ensure the transition class is added in next frame\n    // This will make sure that the transition animation is triggered\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        Object.assign(ripple.style, {\n          transform: 'translate3d(-50%, -50%, 0) scale3d(1, 1, 1)',\n          opacity: '1',\n        });\n      });\n    });\n  };\n\n  private handlePressOut = (e: any) => {\n    this.props.onPressOut && this.props.onPressOut(e);\n\n    const containers = e.currentTarget.querySelectorAll(\n      '[data-paper-ripple]'\n    ) as HTMLElement[];\n\n    requestAnimationFrame(() => {\n      requestAnimationFrame(() => {\n        containers.forEach(container => {\n          // @ts-ignore\n          const ripple = container.firstChild;\n\n          // @ts-ignore\n          Object.assign(ripple.style, {\n            transitionDuration: '250ms',\n            opacity: 0,\n          });\n\n          // Finally remove the span after the transition\n          setTimeout(() => {\n            // @ts-ignore\n            const { parentNode } = container;\n\n            if (parentNode) {\n              parentNode.removeChild(container);\n            }\n          }, 500);\n        });\n      });\n    });\n  };\n\n  render() {\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    const {\n      style,\n      background,\n      borderless,\n      disabled: disabledProp,\n      rippleColor,\n      underlayColor,\n      children,\n      theme,\n      ...rest\n    } = this.props;\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n\n    const disabled = disabledProp || !this.props.onPress;\n\n    return (\n      <TouchableWithoutFeedback\n        {...rest}\n        onPressIn={this.handlePressIn}\n        onPressOut={this.handlePressOut}\n        disabled={disabled}\n      >\n        <View\n          style={[styles.touchable, borderless && styles.borderless, style]}\n        >\n          {React.Children.only(children)}\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  touchable: {\n    position: 'relative',\n  },\n  borderless: {\n    overflow: 'hidden',\n  },\n});\n\nexport default withTheme(TouchableRipple);\n"]},"metadata":{},"sourceType":"module"}