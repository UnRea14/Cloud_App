{"ast":null,"code":"import _extends2 from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from \"../styles/overlay\";\nimport Icon from \"./Icon\";\nimport Surface from \"./Surface\";\nimport Badge from \"./Badge\";\nimport TouchableRipple from \"./TouchableRipple\";\nimport Text from \"./Typography/Text\";\nimport { black, white } from \"../styles/colors\";\nimport { withTheme } from \"../core/theming\";\nvar MIN_RIPPLE_SCALE = 0.001;\nvar MIN_TAB_WIDTH = 96;\nvar MAX_TAB_WIDTH = 168;\nvar BAR_HEIGHT = 56;\nvar FAR_FAR_AWAY = 9999;\n\nvar Touchable = function Touchable(_ref) {\n  var _0 = _ref.route,\n      style = _ref.style,\n      children = _ref.children,\n      borderless = _ref.borderless,\n      centered = _ref.centered,\n      rippleColor = _ref.rippleColor,\n      rest = _objectWithoutProperties(_ref, [\"route\", \"style\", \"children\", \"borderless\", \"centered\", \"rippleColor\"]);\n\n  return TouchableRipple.supported ? React.createElement(TouchableRipple, _extends({}, rest, {\n    borderless: borderless,\n    centered: centered,\n    rippleColor: rippleColor,\n    style: style\n  }), children) : React.createElement(TouchableWithoutFeedback, rest, React.createElement(View, {\n    style: style\n  }, children));\n};\n\nvar SceneComponent = function (_React$PureComponent) {\n  _inherits(SceneComponent, _React$PureComponent);\n\n  var _super = _createSuper(SceneComponent);\n\n  function SceneComponent() {\n    _classCallCheck(this, SceneComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SceneComponent, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          component = _this$props.component,\n          rest = _objectWithoutProperties(_this$props, [\"component\"]);\n\n      return React.createElement(component, rest);\n    }\n  }]);\n\n  return SceneComponent;\n}(React.PureComponent);\n\nvar BottomNavigation = function (_React$Component) {\n  _inherits(BottomNavigation, _React$Component);\n\n  var _super2 = _createSuper(BottomNavigation);\n\n  function BottomNavigation(props) {\n    var _this;\n\n    _classCallCheck(this, BottomNavigation);\n\n    _this = _super2.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardShow\", function () {\n      var scale = _this.props.theme.animation.scale;\n\n      _this.setState({\n        keyboard: true\n      }, function () {\n        return Animated.timing(_this.state.visible, {\n          toValue: 0,\n          duration: 150 * scale,\n          useNativeDriver: true\n        }).start();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyboardHide\", function () {\n      var scale = _this.props.theme.animation.scale;\n      Animated.timing(_this.state.visible, {\n        toValue: 1,\n        duration: 100 * scale,\n        useNativeDriver: true\n      }).start(function () {\n        _this.setState({\n          keyboard: false\n        });\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"animateToCurrentIndex\", function () {\n      var shifting = _this.isShifting();\n\n      var _this$props2 = _this.props,\n          navigationState = _this$props2.navigationState,\n          scale = _this$props2.theme.animation.scale;\n      var routes = navigationState.routes,\n          index = navigationState.index;\n\n      _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      Animated.parallel([Animated.timing(_this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true\n      })].concat(_toConsumableArray(routes.map(function (_, i) {\n        return Animated.timing(_this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true\n        });\n      })))).start(function (_ref2) {\n        var finished = _ref2.finished;\n\n        _this.state.tabs.map(function (tab, i) {\n          return tab.setValue(i === index ? 1 : 0);\n        });\n\n        _this.state.index.setValue(index);\n\n        _this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n        if (finished) {\n          _this.state.offsets.forEach(function (offset, i) {\n            if (i === index) {\n              offset.setValue(0);\n            } else {\n              offset.setValue(1);\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var layout = _this.state.layout;\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          height = _e$nativeEvent$layout.height,\n          width = _e$nativeEvent$layout.width;\n\n      if (height === layout.height && width === layout.width) {\n        return;\n      }\n\n      _this.setState({\n        layout: {\n          height: height,\n          width: width,\n          measured: true\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTabPress\", function (index) {\n      var _this$props3 = _this.props,\n          navigationState = _this$props3.navigationState,\n          onTabPress = _this$props3.onTabPress,\n          onIndexChange = _this$props3.onIndexChange;\n      var event = {\n        route: navigationState.routes[index],\n        defaultPrevented: false,\n        preventDefault: function preventDefault() {\n          event.defaultPrevented = true;\n        }\n      };\n      onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (index !== navigationState.index) {\n        onIndexChange(index);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"jumpTo\", function (key) {\n      var index = _this.props.navigationState.routes.findIndex(function (route) {\n        return route.key === key;\n      });\n\n      _this.props.onIndexChange(index);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isShifting\", function () {\n      return typeof _this.props.shifting === 'boolean' ? _this.props.shifting : _this.props.navigationState.routes.length > 3;\n    });\n\n    var _index = _this.props.navigationState.index;\n    _this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(_index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: {\n        height: 0,\n        width: 0,\n        measured: false\n      },\n      current: _index,\n      previous: 0,\n      loaded: [_index],\n      keyboard: false\n    };\n    return _this;\n  }\n\n  _createClass(BottomNavigation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.animateToCurrentIndex();\n\n      if (Platform.OS === 'ios') {\n        Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this2 = this;\n\n      if (prevProps.navigationState.index === this.props.navigationState.index) {\n        return;\n      }\n\n      this.state.offsets.forEach(function (offset, i) {\n        if (i === _this2.props.navigationState.index || i === prevProps.navigationState.index) {\n          offset.setValue(0);\n        }\n      });\n      this.animateToCurrentIndex();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var _this$props4 = this.props,\n          navigationState = _this$props4.navigationState,\n          renderScene = _this$props4.renderScene,\n          renderIcon = _this$props4.renderIcon,\n          renderLabel = _this$props4.renderLabel,\n          _this$props4$renderTo = _this$props4.renderTouchable,\n          renderTouchable = _this$props4$renderTo === void 0 ? function (props) {\n        return React.createElement(Touchable, props);\n      } : _this$props4$renderTo,\n          _this$props4$getLabel = _this$props4.getLabelText,\n          getLabelText = _this$props4$getLabel === void 0 ? function (_ref3) {\n        var route = _ref3.route;\n        return route.title;\n      } : _this$props4$getLabel,\n          _this$props4$getBadge = _this$props4.getBadge,\n          getBadge = _this$props4$getBadge === void 0 ? function (_ref4) {\n        var route = _ref4.route;\n        return route.badge;\n      } : _this$props4$getBadge,\n          _this$props4$getColor = _this$props4.getColor,\n          getColor = _this$props4$getColor === void 0 ? function (_ref5) {\n        var route = _ref5.route;\n        return route.color;\n      } : _this$props4$getColor,\n          _this$props4$getAcces = _this$props4.getAccessibilityLabel,\n          getAccessibilityLabel = _this$props4$getAcces === void 0 ? function (_ref6) {\n        var route = _ref6.route;\n        return route.accessibilityLabel;\n      } : _this$props4$getAcces,\n          _this$props4$getTestI = _this$props4.getTestID,\n          getTestID = _this$props4$getTestI === void 0 ? function (_ref7) {\n        var route = _ref7.route;\n        return route.testID;\n      } : _this$props4$getTestI,\n          activeColor = _this$props4.activeColor,\n          inactiveColor = _this$props4.inactiveColor,\n          keyboardHidesNavigationBar = _this$props4.keyboardHidesNavigationBar,\n          barStyle = _this$props4.barStyle,\n          labeled = _this$props4.labeled,\n          style = _this$props4.style,\n          theme = _this$props4.theme,\n          sceneAnimationEnabled = _this$props4.sceneAnimationEnabled;\n      var _this$state = this.state,\n          layout = _this$state.layout,\n          loaded = _this$state.loaded,\n          index = _this$state.index,\n          visible = _this$state.visible,\n          ripple = _this$state.ripple,\n          keyboard = _this$state.keyboard,\n          tabs = _this$state.tabs,\n          offsets = _this$state.offsets;\n      var routes = navigationState.routes;\n      var colors = theme.colors,\n          isDarkTheme = theme.dark,\n          mode = theme.mode;\n      var shifting = this.isShifting();\n\n      var _ref8 = StyleSheet.flatten(barStyle) || {},\n          customBackground = _ref8.backgroundColor,\n          _ref8$elevation = _ref8.elevation,\n          elevation = _ref8$elevation === void 0 ? 4 : _ref8$elevation;\n\n      var approxBackgroundColor = customBackground ? customBackground : isDarkTheme && mode === 'adaptive' ? overlay(elevation, colors.surface) : colors.primary;\n      var backgroundColor = shifting ? index.interpolate({\n        inputRange: routes.map(function (_, i) {\n          return i;\n        }),\n        outputRange: routes.map(function (route) {\n          return getColor({\n            route: route\n          }) || approxBackgroundColor;\n        })\n      }) : approxBackgroundColor;\n      var isDark = !color(approxBackgroundColor).isLight();\n      var textColor = isDark ? white : black;\n      var activeTintColor = typeof activeColor !== 'undefined' ? activeColor : textColor;\n      var inactiveTintColor = typeof inactiveColor !== 'undefined' ? inactiveColor : color(textColor).alpha(0.5).rgb().string();\n      var touchColor = color(activeColor || activeTintColor).alpha(0.12).rgb().string();\n      var maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n      var maxTabBarWidth = maxTabWidth * routes.length;\n      var tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n      var tabWidth = tabBarWidth / routes.length;\n      var rippleSize = layout.width / 4;\n      return React.createElement(View, {\n        style: [styles.container, style]\n      }, React.createElement(View, {\n        style: [styles.content, {\n          backgroundColor: colors.background\n        }]\n      }, routes.map(function (route, index) {\n        if (!loaded.includes(index)) {\n          return null;\n        }\n\n        var focused = navigationState.index === index;\n        var opacity = sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n        var top = offsets[index].interpolate({\n          inputRange: [0, 1],\n          outputRange: [0, FAR_FAR_AWAY]\n        });\n        return React.createElement(Animated.View, {\n          key: route.key,\n          pointerEvents: focused ? 'auto' : 'none',\n          accessibilityElementsHidden: !focused,\n          importantForAccessibility: focused ? 'auto' : 'no-hide-descendants',\n          style: [StyleSheet.absoluteFill, {\n            opacity: opacity\n          }],\n          collapsable: false,\n          removeClippedSubviews: Platform.OS === 'ios' ? navigationState.index !== index : true\n        }, React.createElement(Animated.View, {\n          style: [styles.content, {\n            top: top\n          }]\n        }, renderScene({\n          route: route,\n          jumpTo: _this3.jumpTo\n        })));\n      })), React.createElement(Surface, {\n        style: [styles.bar, keyboardHidesNavigationBar ? {\n          transform: [{\n            translateY: visible.interpolate({\n              inputRange: [0, 1],\n              outputRange: [layout.height, 0]\n            })\n          }],\n          position: keyboard ? 'absolute' : null\n        } : null, barStyle],\n        pointerEvents: layout.measured ? keyboardHidesNavigationBar && keyboard ? 'none' : 'auto' : 'none',\n        onLayout: this.handleLayout\n      }, React.createElement(Animated.View, {\n        style: [styles.barContent, {\n          backgroundColor: backgroundColor\n        }]\n      }, React.createElement(SafeAreaView, {\n        forceInset: {\n          top: 'never',\n          bottom: 'always'\n        },\n        style: [styles.items, {\n          maxWidth: maxTabBarWidth\n        }]\n      }, shifting ? React.createElement(Animated.View, {\n        pointerEvents: \"none\",\n        style: [styles.ripple, {\n          top: (BAR_HEIGHT - rippleSize) / 2,\n          left: tabWidth * (navigationState.index + 0.5) - rippleSize / 2,\n          height: rippleSize,\n          width: rippleSize,\n          borderRadius: rippleSize / 2,\n          backgroundColor: getColor({\n            route: routes[navigationState.index]\n          }),\n          transform: [{\n            scale: ripple.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 8]\n            })\n          }],\n          opacity: ripple.interpolate({\n            inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n            outputRange: [0, 0, 1, 1]\n          })\n        }]\n      }) : null, routes.map(function (route, index) {\n        var focused = navigationState.index === index;\n        var active = tabs[index];\n        var scale = labeled && shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        }) : 1;\n        var translateY = labeled ? shifting ? active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [7, 0]\n        }) : 0 : 7;\n        var activeOpacity = active;\n        var inactiveOpacity = active.interpolate({\n          inputRange: [0, 1],\n          outputRange: [1, 0]\n        });\n        var badge = getBadge({\n          route: route\n        });\n        return renderTouchable({\n          key: route.key,\n          route: route,\n          borderless: true,\n          centered: true,\n          rippleColor: touchColor,\n          onPress: function onPress() {\n            return _this3.handleTabPress(index);\n          },\n          testID: getTestID({\n            route: route\n          }),\n          accessibilityLabel: getAccessibilityLabel({\n            route: route\n          }),\n          accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n          accessibilityComponentType: 'button',\n          accessibilityRole: 'button',\n          accessibilityStates: ['selected'],\n          style: styles.item,\n          children: React.createElement(View, {\n            pointerEvents: \"none\"\n          }, React.createElement(Animated.View, {\n            style: [styles.iconContainer, {\n              transform: [{\n                translateY: translateY\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: activeTintColor,\n            size: 24\n          })), React.createElement(Animated.View, {\n            style: [styles.iconWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderIcon ? renderIcon({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Icon, {\n            source: route.icon,\n            color: inactiveTintColor,\n            size: 24\n          })), React.createElement(View, {\n            style: [styles.badgeContainer, {\n              right: (badge != null && typeof badge !== 'boolean' ? String(badge).length * -2 : 0) - 2\n            }]\n          }, typeof badge === 'boolean' ? React.createElement(Badge, {\n            visible: badge,\n            size: 8\n          }) : React.createElement(Badge, {\n            visible: badge != null,\n            size: 16\n          }, badge))), labeled ? React.createElement(Animated.View, {\n            style: [styles.labelContainer, {\n              transform: [{\n                scale: scale\n              }]\n            }]\n          }, React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: activeOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: true,\n            color: activeTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: activeTintColor\n            }]\n          }, getLabelText({\n            route: route\n          }))), shifting ? null : React.createElement(Animated.View, {\n            style: [styles.labelWrapper, {\n              opacity: inactiveOpacity\n            }]\n          }, renderLabel ? renderLabel({\n            route: route,\n            focused: false,\n            color: inactiveTintColor\n          }) : React.createElement(Text, {\n            style: [styles.label, {\n              color: inactiveTintColor\n            }]\n          }, getLabelText({\n            route: route\n          })))) : React.createElement(View, {\n            style: styles.labelContainer\n          }))\n        });\n      })))));\n    }\n  }], [{\n    key: \"SceneMap\",\n    value: function SceneMap(scenes) {\n      return function (_ref9) {\n        var route = _ref9.route,\n            jumpTo = _ref9.jumpTo;\n        return React.createElement(SceneComponent, {\n          key: route.key,\n          component: scenes[route.key ? route.key : ''],\n          route: route,\n          jumpTo: jumpTo\n        });\n      };\n    }\n  }, {\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _nextProps$navigation = nextProps.navigationState,\n          index = _nextProps$navigation.index,\n          routes = _nextProps$navigation.routes;\n      var tabs = routes.map(function (_, i) {\n        return prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0);\n      });\n      var offsets = routes.map(function (_, i) {\n        return prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1);\n      });\n      var nextState = {\n        tabs: tabs,\n        offsets: offsets\n      };\n\n      if (index !== prevState.current) {\n        _extends2(nextState, {\n          current: index,\n          previous: prevState.current,\n          loaded: prevState.loaded.includes(index) ? prevState.loaded : [].concat(_toConsumableArray(prevState.loaded), [index])\n        });\n      }\n\n      return nextState;\n    }\n  }]);\n\n  return BottomNavigation;\n}(React.Component);\n\n_defineProperty(BottomNavigation, \"defaultProps\", {\n  labeled: true,\n  keyboardHidesNavigationBar: true\n});\n\nexport default withTheme(BottomNavigation);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden'\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%'\n  },\n  item: {\n    flex: 1,\n    paddingVertical: 6\n  },\n  ripple: {\n    position: 'absolute'\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center'\n  },\n  iconWrapper: _objectSpread(_objectSpread({}, StyleSheet.absoluteFillObject), {}, {\n    alignItems: 'center'\n  }),\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2\n  },\n  labelWrapper: _objectSpread({}, StyleSheet.absoluteFillObject),\n  label: _objectSpread({\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  }, Platform.OS === 'web' ? {\n    whiteSpace: 'nowrap'\n  } : null),\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2\n  }\n});","map":{"version":3,"sources":["BottomNavigation.tsx"],"names":["MIN_RIPPLE_SCALE","MIN_TAB_WIDTH","MAX_TAB_WIDTH","BAR_HEIGHT","FAR_FAR_AWAY","Touchable","route","rippleColor","TouchableRipple","style","React","render","component","BottomNavigation","jumpTo","scenes","labeled","keyboardHidesNavigationBar","routes","nextProps","tabs","prevState","Animated","i","offsets","nextState","index","Object","current","previous","loaded","constructor","visible","ripple","touch","layout","height","width","measured","keyboard","componentDidMount","Platform","Keyboard","componentDidUpdate","prevProps","offset","componentWillUnmount","scale","toValue","duration","useNativeDriver","shifting","theme","animation","finished","tab","e","onIndexChange","event","navigationState","defaultPrevented","preventDefault","onTabPress","key","renderTouchable","props","getLabelText","getBadge","getColor","getAccessibilityLabel","getTestID","sceneAnimationEnabled","dark","mode","backgroundColor","elevation","StyleSheet","approxBackgroundColor","customBackground","isDarkTheme","overlay","colors","inputRange","outputRange","isDark","color","textColor","activeTintColor","inactiveTintColor","touchColor","activeColor","maxTabWidth","maxTabBarWidth","tabBarWidth","Math","tabWidth","rippleSize","styles","background","focused","opacity","top","renderScene","transform","translateY","position","handleLayout","bottom","maxWidth","left","borderRadius","active","activeOpacity","inactiveOpacity","badge","borderless","centered","onPress","testID","accessibilityLabel","accessibilityTraits","accessibilityComponentType","accessibilityRole","accessibilityStates","children","renderIcon","right","String","renderLabel","labelContainer","withTheme","container","flex","overflow","content","bar","barContent","alignItems","items","flexDirection","item","paddingVertical","iconContainer","marginTop","marginHorizontal","alignSelf","iconWrapper","paddingBottom","labelWrapper","label","fontSize","textAlign","whiteSpace","badgeContainer"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-multi-comp */\n\nimport * as React from 'react';\nimport {\n  View,\n  Animated,\n  TouchableWithoutFeedback,\n  TouchableWithoutFeedbackProps,\n  StyleSheet,\n  StyleProp,\n  Platform,\n  Keyboard,\n  ViewStyle,\n  LayoutChangeEvent,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport color from 'color';\nimport overlay from '../styles/overlay';\nimport Icon, { IconSource } from './Icon';\nimport Surface from './Surface';\nimport Badge from './Badge';\nimport TouchableRipple from './TouchableRipple';\nimport Text from './Typography/Text';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Route = {\n  key: string;\n  title?: string;\n  icon?: IconSource;\n  badge?: string | number | boolean;\n  color?: string;\n  accessibilityLabel?: string;\n  testID?: string;\n};\n\ntype NavigationState = {\n  index: number;\n  routes: Route[];\n};\n\ntype TabPressEvent = {\n  defaultPrevented: boolean;\n  preventDefault(): void;\n};\n\ntype TouchableProps = TouchableWithoutFeedbackProps & {\n  key: string;\n  route: Route;\n  children: React.ReactNode;\n  borderless?: boolean;\n  centered?: boolean;\n  rippleColor?: string;\n};\n\ntype Props = {\n  /**\n   * Whether the shifting style is used, the active tab appears wider and the inactive tabs won't have a label.\n   * By default, this is `true` when you have more than 3 tabs.\n   */\n  shifting?: boolean;\n  /**\n   * Whether to show labels in tabs. When `false`, only icons will be displayed.\n   */\n  labeled?: boolean;\n  /**\n   * State for the bottom navigation. The state should contain the following properties:\n   *\n   * - `index`: a number reprsenting the index of the active route in the `routes` array\n   * - `routes`: an array containing a list of route objects used for rendering the tabs\n   *\n   * Each route object should contain the following properties:\n   *\n   * - `key`: a unique key to identify the route (required)\n   * - `title`: title of the route to use as the tab label\n   * - `icon`: icon to use as the tab icon, can be a string, an image source or a react component\n   * - `color`: color to use as background color for shifting bottom navigation\n   * - `badge`: badge to show on the tab icon, can be `true` to show a dot, `string` or `number` to show text.\n   * - `accessibilityLabel`: accessibility label for the tab button\n   * - `testID`: test id for the tab button\n   *\n   * Example:\n   *\n   * ```js\n   * {\n   *   index: 1,\n   *   routes: [\n   *     { key: 'music', title: 'Music', icon: 'queue-music', color: '#3F51B5' },\n   *     { key: 'albums', title: 'Albums', icon: 'album', color: '#009688' },\n   *     { key: 'recents', title: 'Recents', icon: 'history', color: '#795548' },\n   *     { key: 'purchased', title: 'Purchased', icon: 'shopping-cart', color: '#607D8B' },\n   *   ]\n   * }\n   * ```\n   *\n   * `BottomNavigation` is a controlled component, which means the `index` needs to be updated via the `onIndexChange` callback.\n   */\n  navigationState: NavigationState;\n  /**\n   * Callback which is called on tab change, receives the index of the new tab as argument.\n   * The navigation state needs to be updated when it's called, otherwise the change is dropped.\n   */\n  onIndexChange: (index: number) => void;\n  /**\n   * Callback which returns a react element to render as the page for the tab. Receives an object containing the route as the argument:\n   *\n   * ```js\n   * renderScene = ({ route, jumpTo }) => {\n   *   switch (route.key) {\n   *     case 'music':\n   *       return <MusicRoute jumpTo={jumpTo} />;\n   *     case 'albums':\n   *       return <AlbumsRoute jumpTo={jumpTo} />;\n   *   }\n   * }\n   * ```\n   *\n   * Pages are lazily rendered, which means that a page will be rendered the first time you navigate to it.\n   * After initial render, all the pages stay rendered to preserve their state.\n   *\n   * You need to make sure that your individual routes implement a `shouldComponentUpdate` to improve the performance.\n   * To make it easier to specify the components, you can use the `SceneMap` helper:\n   *\n   * ```js\n   * renderScene = BottomNavigation.SceneMap({\n   *   music: MusicRoute,\n   *   albums: AlbumsRoute,\n   * });\n   * ```\n   *\n   * Specifying the components this way is easier and takes care of implementing a `shouldComponentUpdate` method.\n   * Each component will receive the current route and a `jumpTo` method as it's props.\n   * The `jumpTo` method can be used to navigate to other tabs programmatically:\n   *\n   * ```js\n   * this.props.jumpTo('albums')\n   * ```\n   */\n  renderScene: (props: {\n    route: Route;\n    jumpTo: (key: string) => void;\n  }) => React.ReactNode | null;\n  /**\n   * Callback which returns a React Element to be used as tab icon.\n   */\n  renderIcon?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which React Element to be used as tab label.\n   */\n  renderLabel?: (props: {\n    route: Route;\n    focused: boolean;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Callback which returns a React element to be used as the touchable for the tab item.\n   * Renders a `TouchableRipple` on Android and `TouchableWithoutFeedback` with `View` on iOS.\n   */\n  renderTouchable?: (props: TouchableProps) => React.ReactNode;\n  /**\n   * Get label text for the tab, uses `route.title` by default. Use `renderLabel` to replace label component.\n   */\n  getLabelText?: (props: { route: Route }) => string;\n  /**\n   * Get accessibility label for the tab button. This is read by the screen reader when the user taps the tab.\n   * Uses `route.accessibilityLabel` by default.\n   */\n  getAccessibilityLabel?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get the id to locate this tab button in tests, uses `route.testID` by default.\n   */\n  getTestID?: (props: { route: Route }) => string | undefined;\n  /**\n   * Get badge for the tab, uses `route.badge` by default.\n   */\n  getBadge?: (props: { route: Route }) => boolean | number | string | undefined;\n  /**\n   * Get color for the tab, uses `route.color` by default.\n   */\n  getColor?: (props: { route: Route }) => string | undefined;\n  /**\n   * Function to execute on tab press. It receives the route for the pressed tab, useful for things like scroll to top.\n   */\n  onTabPress?: (props: { route: Route } & TabPressEvent) => void;\n  /**\n   * Custom color for icon and label in the active tab.\n   */\n  activeColor?: string;\n  /**\n   * Custom color for icon and label in the inactive tab.\n   */\n  inactiveColor?: string;\n  /**\n   * Whether animation is enabled for scenes transitions in `shifting` mode.\n   * By default, the scenes cross-fade during tab change when `shifting` is enabled.\n   * Specify `sceneAnimationEnabled` as `false` to disable the animation.\n   */\n  sceneAnimationEnabled?: boolean;\n  /**\n   * Whether the bottom navigation bar is hidden when keyboard is shown.\n   * On Android, this works best when [`windowSoftInputMode`](https://developer.android.com/guide/topics/manifest/activity-element#wsoft) is set to `adjustResize`.\n   */\n  keyboardHidesNavigationBar?: boolean;\n  /**\n   * Style for the bottom navigation bar.\n   * You can set a bottom padding here if you have a translucent navigation bar on Android:\n   *\n   * ```js\n   * barStyle={{ paddingBottom: 48 }}\n   * ```\n   */\n  barStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  /**\n   * Visibility of the navigation bar, visible state is 1 and invisible is 0.\n   */\n  visible: Animated.Value;\n  /**\n   * Active state of individual tab items, active state is 1 and inactve state is 0.\n   */\n  tabs: Animated.Value[];\n  /**\n   * The top offset for each tab item to position it offscreen.\n   * Placing items offscreen helps to save memory usage for inactive screens with removeClippedSubviews.\n   * We use animated values for this to prevent unnecesary re-renders.\n   */\n  offsets: Animated.Value[];\n  /**\n   * Index of the currently active tab. Used for setting the background color.\n   * Use don't use the color as an animated value directly, because `setValue` seems to be buggy with colors.\n   */\n  index: Animated.Value;\n  /**\n   * Animation for the touch, used to determine it's scale and opacity.\n   */\n  touch: Animated.Value;\n  /**\n   * Animation for the background color ripple, used to determine it's scale and opacity.\n   */\n  ripple: Animated.Value;\n  /**\n   * Layout of the navigation bar. The width is used to determine the size and position of the ripple.\n   */\n  layout: { height: number; width: number; measured: boolean };\n  /**\n   * Currently active index. Used only for getDerivedStateFromProps.\n   */\n  current: number;\n  /**\n   * Previously active index. Used to determine the position of the ripple.\n   */\n  previous: number;\n  /**\n   * List of loaded tabs, tabs will be loaded when navigated to.\n   */\n  loaded: number[];\n  /**\n   * Trak whether the keyboard is visible to show and hide the navigation bar.\n   */\n  keyboard: boolean;\n};\n\nconst MIN_RIPPLE_SCALE = 0.001; // Minimum scale is not 0 due to bug with animation\nconst MIN_TAB_WIDTH = 96;\nconst MAX_TAB_WIDTH = 168;\nconst BAR_HEIGHT = 56;\nconst FAR_FAR_AWAY = 9999;\n\nconst Touchable = ({\n  route: _0,\n  style,\n  children,\n  borderless,\n  centered,\n  rippleColor,\n  ...rest\n}: TouchableProps) =>\n  TouchableRipple.supported ? (\n    <TouchableRipple\n      {...rest}\n      borderless={borderless}\n      centered={centered}\n      rippleColor={rippleColor}\n      style={style}\n    >\n      {children}\n    </TouchableRipple>\n  ) : (\n    <TouchableWithoutFeedback {...rest}>\n      <View style={style}>{children}</View>\n    </TouchableWithoutFeedback>\n  );\n\nclass SceneComponent extends React.PureComponent<any> {\n  render() {\n    const { component, ...rest } = this.props;\n    return React.createElement(component, rest);\n  }\n}\n\n/**\n * Bottom navigation provides quick navigation between top-level views of an app with a bottom navigation bar.\n * It is primarily designed for use on mobile.\n *\n * For integration with React Navigation, you can use [react-navigation-material-bottom-tab-navigator](https://github.com/react-navigation/react-navigation-material-bottom-tab-navigator).\n *\n * By default Bottom navigation uses primary color as a background, in dark theme with `adaptive` mode it will use surface colour instead.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more informations\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/bottom-navigation.gif\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { BottomNavigation, Text } from 'react-native-paper';\n *\n * const MusicRoute = () => <Text>Music</Text>;\n *\n * const AlbumsRoute = () => <Text>Albums</Text>;\n *\n * const RecentsRoute = () => <Text>Recents</Text>;\n *\n * const MyComponent = () => {\n *   const [index, setIndex] = React.useState(0);\n *   const [routes] = React.useState([\n *     { key: 'music', title: 'Music', icon: 'queue-music' },\n *     { key: 'albums', title: 'Albums', icon: 'album' },\n *     { key: 'recents', title: 'Recents', icon: 'history' },\n *   ]);\n *\n *   const renderScene = BottomNavigation.SceneMap({\n *     music: MusicRoute,\n *     albums: AlbumsRoute,\n *     recents: RecentsRoute,\n *   });\n *\n *   return (\n *     <BottomNavigation\n *       navigationState={{ index, routes }}\n *       onIndexChange={setIndex}\n *       renderScene={renderScene}\n *     />\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nclass BottomNavigation extends React.Component<Props, State> {\n  /**\n   * Function which takes a map of route keys to components.\n   * Pure components are used to minmize re-rendering of the pages.\n   * This drastically improves the animation performance.\n   */\n  static SceneMap(scenes: {\n    [key: string]: React.ComponentType<{\n      route: Route;\n      jumpTo: (key: string) => void;\n    }>;\n  }) {\n    return ({\n      route,\n      jumpTo,\n    }: {\n      route: Route;\n      jumpTo: (key: string) => void;\n    }) => (\n      <SceneComponent\n        key={route.key}\n        component={scenes[route.key ? route.key : '']}\n        route={route}\n        jumpTo={jumpTo}\n      />\n    );\n  }\n\n  static defaultProps = {\n    labeled: true,\n    keyboardHidesNavigationBar: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: any, prevState: State) {\n    const { index, routes } = nextProps.navigationState;\n\n    // Re-create animated values if routes have been added/removed\n    // Preserve previous animated values if they exist, so we don't break animations\n    const tabs = routes.map(\n      // focused === 1, unfocused === 0\n      (_: any, i: number) =>\n        prevState.tabs[i] || new Animated.Value(i === index ? 1 : 0)\n    );\n    const offsets = routes.map(\n      // offscreen === 1, normal === 0\n      (_: any, i: number) =>\n        prevState.offsets[i] || new Animated.Value(i === index ? 0 : 1)\n    );\n\n    const nextState = {\n      tabs,\n      offsets,\n    };\n\n    if (index !== prevState.current) {\n      /* $FlowFixMe */\n      Object.assign(nextState, {\n        // Store the current index in state so that we can later check if the index has changed\n        current: index,\n        previous: prevState.current,\n        // Set the current tab to be loaded if it was not loaded before\n        loaded: prevState.loaded.includes(index)\n          ? prevState.loaded\n          : [...prevState.loaded, index],\n      });\n    }\n\n    return nextState;\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { index } = this.props.navigationState;\n\n    this.state = {\n      visible: new Animated.Value(1),\n      tabs: [],\n      offsets: [],\n      index: new Animated.Value(index),\n      ripple: new Animated.Value(MIN_RIPPLE_SCALE),\n      touch: new Animated.Value(MIN_RIPPLE_SCALE),\n      layout: { height: 0, width: 0, measured: false },\n      current: index,\n      previous: 0,\n      loaded: [index],\n      keyboard: false,\n    };\n  }\n\n  componentDidMount() {\n    // Workaround for native animated bug in react-native@^0.57\n    // Context: https://github.com/callstack/react-native-paper/pull/637\n    this.animateToCurrentIndex();\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.navigationState.index === this.props.navigationState.index) {\n      return;\n    }\n\n    // Reset offsets of previous and current tabs before animation\n    this.state.offsets.forEach((offset, i) => {\n      if (\n        i === this.props.navigationState.index ||\n        i === prevProps.navigationState.index\n      ) {\n        offset.setValue(0);\n      }\n    });\n\n    this.animateToCurrentIndex();\n  }\n\n  componentWillUnmount() {\n    if (Platform.OS === 'ios') {\n      Keyboard.removeListener('keyboardWillShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardWillHide', this.handleKeyboardHide);\n    } else {\n      Keyboard.removeListener('keyboardDidShow', this.handleKeyboardShow);\n      Keyboard.removeListener('keyboardDidHide', this.handleKeyboardHide);\n    }\n  }\n\n  private handleKeyboardShow = () => {\n    const { scale } = this.props.theme.animation;\n    this.setState({ keyboard: true }, () =>\n      Animated.timing(this.state.visible, {\n        toValue: 0,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start()\n    );\n  };\n\n  private handleKeyboardHide = () => {\n    const { scale } = this.props.theme.animation;\n    Animated.timing(this.state.visible, {\n      toValue: 1,\n      duration: 100 * scale,\n      useNativeDriver: true,\n    }).start(() => {\n      this.setState({ keyboard: false });\n    });\n  };\n\n  private animateToCurrentIndex = () => {\n    const shifting = this.isShifting();\n    const {\n      navigationState,\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n    const { routes, index } = navigationState;\n\n    // Reset the ripple to avoid glitch if it's currently animating\n    this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n    Animated.parallel([\n      Animated.timing(this.state.ripple, {\n        toValue: 1,\n        duration: shifting ? 400 * scale : 0,\n        useNativeDriver: true,\n      }),\n      ...routes.map((_, i) =>\n        Animated.timing(this.state.tabs[i], {\n          toValue: i === index ? 1 : 0,\n          duration: shifting ? 150 * scale : 0,\n          useNativeDriver: true,\n        })\n      ),\n    ]).start(({ finished }) => {\n      // Workaround a bug in native animations where this is reset after first animation\n      this.state.tabs.map((tab, i) => tab.setValue(i === index ? 1 : 0));\n\n      // Update the index to change bar's bacground color and then hide the ripple\n      this.state.index.setValue(index);\n      this.state.ripple.setValue(MIN_RIPPLE_SCALE);\n\n      if (finished) {\n        // Position all inactive screens offscreen to save memory usage\n        // Only do it when animation has finished to avoid glitches mid-transition if switching fast\n        this.state.offsets.forEach((offset, i) => {\n          if (i === index) {\n            offset.setValue(0);\n          } else {\n            offset.setValue(1);\n          }\n        });\n      }\n    });\n  };\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { layout } = this.state;\n    const { height, width } = e.nativeEvent.layout;\n\n    if (height === layout.height && width === layout.width) {\n      return;\n    }\n\n    this.setState({\n      layout: {\n        height,\n        width,\n        measured: true,\n      },\n    });\n  };\n\n  private handleTabPress = (index: number) => {\n    const { navigationState, onTabPress, onIndexChange } = this.props;\n\n    const event = {\n      route: navigationState.routes[index],\n      defaultPrevented: false,\n      preventDefault: () => {\n        event.defaultPrevented = true;\n      },\n    };\n\n    onTabPress?.(event);\n\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    if (index !== navigationState.index) {\n      onIndexChange(index);\n    }\n  };\n\n  private jumpTo = (key: string) => {\n    const index = this.props.navigationState.routes.findIndex(\n      route => route.key === key\n    );\n\n    this.props.onIndexChange(index);\n  };\n\n  private isShifting = () =>\n    typeof this.props.shifting === 'boolean'\n      ? this.props.shifting\n      : this.props.navigationState.routes.length > 3;\n\n  render() {\n    const {\n      navigationState,\n      renderScene,\n      renderIcon,\n      renderLabel,\n      renderTouchable = (props: TouchableProps) => <Touchable {...props} />,\n      getLabelText = ({ route }: { route: Route }) => route.title,\n      getBadge = ({ route }: { route: Route }) => route.badge,\n      getColor = ({ route }: { route: Route }) => route.color,\n      getAccessibilityLabel = ({ route }: { route: Route }) =>\n        route.accessibilityLabel,\n      getTestID = ({ route }: { route: Route }) => route.testID,\n      activeColor,\n      inactiveColor,\n      keyboardHidesNavigationBar,\n      barStyle,\n      labeled,\n      style,\n      theme,\n      sceneAnimationEnabled,\n    } = this.props;\n\n    const {\n      layout,\n      loaded,\n      index,\n      visible,\n      ripple,\n      keyboard,\n      tabs,\n      offsets,\n    } = this.state;\n    const { routes } = navigationState;\n    const { colors, dark: isDarkTheme, mode } = theme;\n\n    const shifting = this.isShifting();\n\n    const { backgroundColor: customBackground, elevation = 4 }: ViewStyle =\n      StyleSheet.flatten(barStyle) || {};\n\n    const approxBackgroundColor = customBackground\n      ? customBackground\n      : isDarkTheme && mode === 'adaptive'\n      ? overlay(elevation, colors.surface)\n      : colors.primary;\n\n    const backgroundColor = shifting\n      ? index.interpolate({\n          inputRange: routes.map((_, i) => i),\n          //@ts-ignore\n          outputRange: routes.map(\n            route => getColor({ route }) || approxBackgroundColor\n          ),\n        })\n      : approxBackgroundColor;\n\n    const isDark = !color(approxBackgroundColor).isLight();\n\n    const textColor = isDark ? white : black;\n    const activeTintColor =\n      typeof activeColor !== 'undefined' ? activeColor : textColor;\n    const inactiveTintColor =\n      typeof inactiveColor !== 'undefined'\n        ? inactiveColor\n        : color(textColor)\n            .alpha(0.5)\n            .rgb()\n            .string();\n\n    const touchColor = color(activeColor || activeTintColor)\n      .alpha(0.12)\n      .rgb()\n      .string();\n\n    const maxTabWidth = routes.length > 3 ? MIN_TAB_WIDTH : MAX_TAB_WIDTH;\n    const maxTabBarWidth = maxTabWidth * routes.length;\n\n    const tabBarWidth = Math.min(layout.width, maxTabBarWidth);\n    const tabWidth = tabBarWidth / routes.length;\n\n    const rippleSize = layout.width / 4;\n\n    return (\n      <View style={[styles.container, style]}>\n        <View style={[styles.content, { backgroundColor: colors.background }]}>\n          {routes.map((route, index) => {\n            if (!loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n            const focused = navigationState.index === index;\n\n            const opacity =\n              sceneAnimationEnabled !== false ? tabs[index] : focused ? 1 : 0;\n\n            const top = offsets[index].interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, FAR_FAR_AWAY],\n            });\n\n            return (\n              <Animated.View\n                key={route.key}\n                pointerEvents={focused ? 'auto' : 'none'}\n                accessibilityElementsHidden={!focused}\n                importantForAccessibility={\n                  focused ? 'auto' : 'no-hide-descendants'\n                }\n                style={[StyleSheet.absoluteFill, { opacity }]}\n                collapsable={false}\n                removeClippedSubviews={\n                  // On iOS, set removeClippedSubviews to true only when not focused\n                  // This is an workaround for a bug where the clipped view never re-appears\n                  Platform.OS === 'ios' ? navigationState.index !== index : true\n                }\n              >\n                <Animated.View style={[styles.content, { top }]}>\n                  {renderScene({\n                    route,\n                    jumpTo: this.jumpTo,\n                  })}\n                </Animated.View>\n              </Animated.View>\n            );\n          })}\n        </View>\n        <Surface\n          style={\n            [\n              styles.bar,\n              keyboardHidesNavigationBar\n                ? {\n                    // When the keyboard is shown, slide down the navigation bar\n                    transform: [\n                      {\n                        translateY: visible.interpolate({\n                          inputRange: [0, 1],\n                          outputRange: [layout.height, 0],\n                        }),\n                      },\n                    ],\n                    // Absolutely position the navigation bar so that the content is below it\n                    // This is needed to avoid gap at bottom when the navigation bar is hidden\n                    position: keyboard ? 'absolute' : null,\n                  }\n                : null,\n              barStyle,\n            ] as StyleProp<ViewStyle>\n          }\n          pointerEvents={\n            layout.measured\n              ? keyboardHidesNavigationBar && keyboard\n                ? 'none'\n                : 'auto'\n              : 'none'\n          }\n          onLayout={this.handleLayout}\n        >\n          <Animated.View style={[styles.barContent, { backgroundColor }]}>\n            <SafeAreaView\n              forceInset={{ top: 'never', bottom: 'always' }}\n              style={[styles.items, { maxWidth: maxTabBarWidth }]}\n            >\n              {shifting ? (\n                <Animated.View\n                  pointerEvents=\"none\"\n                  style={[\n                    styles.ripple,\n                    {\n                      // Since we have a single ripple, we have to reposition it so that it appears to expand from active tab.\n                      // We need to move it from the top to center of the navigation bar and from the left to the active tab.\n                      top: (BAR_HEIGHT - rippleSize) / 2,\n                      left:\n                        tabWidth * (navigationState.index + 0.5) -\n                        rippleSize / 2,\n                      height: rippleSize,\n                      width: rippleSize,\n                      borderRadius: rippleSize / 2,\n                      backgroundColor: getColor({\n                        route: routes[navigationState.index],\n                      }),\n                      transform: [\n                        {\n                          // Scale to twice the size  to ensure it covers the whole navigation bar\n                          scale: ripple.interpolate({\n                            inputRange: [0, 1],\n                            outputRange: [0, 8],\n                          }),\n                        },\n                      ],\n                      opacity: ripple.interpolate({\n                        inputRange: [0, MIN_RIPPLE_SCALE, 0.3, 1],\n                        outputRange: [0, 0, 1, 1],\n                      }),\n                    },\n                  ]}\n                />\n              ) : null}\n              {routes.map((route, index) => {\n                const focused = navigationState.index === index;\n                const active = tabs[index];\n\n                // Scale the label up\n                const scale =\n                  labeled && shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [0.5, 1],\n                      })\n                    : 1;\n\n                // Move down the icon to account for no-label in shifting and smaller label in non-shifting.\n                const translateY = labeled\n                  ? shifting\n                    ? active.interpolate({\n                        inputRange: [0, 1],\n                        outputRange: [7, 0],\n                      })\n                    : 0\n                  : 7;\n\n                // We render the active icon and label on top of inactive ones and cross-fade them on change.\n                // This trick gives the illusion that we are animating between active and inactive colors.\n                // This is to ensure that we can use native driver, as colors cannot be animated with native driver.\n                const activeOpacity = active;\n                const inactiveOpacity = active.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [1, 0],\n                });\n\n                const badge = getBadge({ route });\n\n                return renderTouchable({\n                  key: route.key,\n                  route,\n                  borderless: true,\n                  centered: true,\n                  rippleColor: touchColor,\n                  onPress: () => this.handleTabPress(index),\n                  testID: getTestID({ route }),\n                  accessibilityLabel: getAccessibilityLabel({ route }),\n                  accessibilityTraits: focused\n                    ? ['button', 'selected']\n                    : 'button',\n                  accessibilityComponentType: 'button',\n                  accessibilityRole: 'button',\n                  accessibilityStates: ['selected'],\n                  style: styles.item,\n                  children: (\n                    <View pointerEvents=\"none\">\n                      <Animated.View\n                        style={[\n                          styles.iconContainer,\n                          { transform: [{ translateY }] },\n                        ]}\n                      >\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: activeOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: true,\n                              color: activeTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={activeTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <Animated.View\n                          style={[\n                            styles.iconWrapper,\n                            { opacity: inactiveOpacity },\n                          ]}\n                        >\n                          {renderIcon ? (\n                            renderIcon({\n                              route,\n                              focused: false,\n                              color: inactiveTintColor,\n                            })\n                          ) : (\n                            <Icon\n                              source={route.icon as IconSource}\n                              color={inactiveTintColor}\n                              size={24}\n                            />\n                          )}\n                        </Animated.View>\n                        <View\n                          style={[\n                            styles.badgeContainer,\n                            {\n                              right:\n                                (badge != null && typeof badge !== 'boolean'\n                                  ? String(badge).length * -2\n                                  : 0) - 2,\n                            },\n                          ]}\n                        >\n                          {typeof badge === 'boolean' ? (\n                            <Badge visible={badge} size={8} />\n                          ) : (\n                            <Badge visible={badge != null} size={16}>\n                              {badge}\n                            </Badge>\n                          )}\n                        </View>\n                      </Animated.View>\n                      {labeled ? (\n                        <Animated.View\n                          style={[\n                            styles.labelContainer,\n                            { transform: [{ scale }] },\n                          ]}\n                        >\n                          <Animated.View\n                            style={[\n                              styles.labelWrapper,\n                              { opacity: activeOpacity },\n                            ]}\n                          >\n                            {renderLabel ? (\n                              renderLabel({\n                                route,\n                                focused: true,\n                                color: activeTintColor,\n                              })\n                            ) : (\n                              <Text\n                                style={[\n                                  styles.label,\n                                  { color: activeTintColor },\n                                ]}\n                              >\n                                {getLabelText({ route })}\n                              </Text>\n                            )}\n                          </Animated.View>\n                          {shifting ? null : (\n                            <Animated.View\n                              style={[\n                                styles.labelWrapper,\n                                { opacity: inactiveOpacity },\n                              ]}\n                            >\n                              {renderLabel ? (\n                                renderLabel({\n                                  route,\n                                  focused: false,\n                                  color: inactiveTintColor,\n                                })\n                              ) : (\n                                <Text\n                                  style={[\n                                    styles.label,\n                                    { color: inactiveTintColor },\n                                  ]}\n                                >\n                                  {getLabelText({ route })}\n                                </Text>\n                              )}\n                            </Animated.View>\n                          )}\n                        </Animated.View>\n                      ) : (\n                        <View style={styles.labelContainer} />\n                      )}\n                    </View>\n                  ),\n                });\n              })}\n            </SafeAreaView>\n          </Animated.View>\n        </Surface>\n      </View>\n    );\n  }\n}\n\nexport default withTheme(BottomNavigation);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n  bar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    elevation: 4,\n  },\n  barContent: {\n    alignItems: 'center',\n    overflow: 'hidden',\n  },\n  items: {\n    flexDirection: 'row',\n    width: '100%',\n  },\n  item: {\n    flex: 1,\n    // Top padding is 6 and bottom padding is 10\n    // The extra 4dp bottom padding is offset by label's height\n    paddingVertical: 6,\n  },\n  ripple: {\n    position: 'absolute',\n  },\n  iconContainer: {\n    height: 24,\n    width: 24,\n    marginTop: 2,\n    marginHorizontal: 12,\n    alignSelf: 'center',\n  },\n  iconWrapper: {\n    ...StyleSheet.absoluteFillObject,\n    alignItems: 'center',\n  },\n  labelContainer: {\n    height: 16,\n    paddingBottom: 2,\n  },\n  labelWrapper: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  label: {\n    fontSize: 12,\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n    ...(Platform.OS === 'web'\n      ? {\n          whiteSpace: 'nowrap',\n        }\n      : null),\n  },\n  badgeContainer: {\n    position: 'absolute',\n    left: 0,\n    top: -2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}