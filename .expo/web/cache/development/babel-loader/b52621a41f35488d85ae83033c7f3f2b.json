{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar MaterialCommunityIcons;\n\ntry {\n  MaterialCommunityIcons = require(\"@expo/vector-icons/MaterialCommunityIcons\").default;\n} catch (e) {\n  if (global.__expo && global.__expo.Icon && global.__expo.Icon.MaterialCommunityIcons) {\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    var isErrorLogged = false;\n\n    MaterialCommunityIcons = function MaterialCommunityIcons(_ref) {\n      var name = _ref.name,\n          color = _ref.color,\n          size = _ref.size,\n          rest = _objectWithoutProperties(_ref, [\"name\", \"color\", \"size\"]);\n\n      if (!isErrorLogged) {\n        if (!/(Cannot find module|Module not found|Cannot resolve module)/.test(e.message)) {\n          console.error(e);\n        }\n\n        console.warn(\"Tried to use the icon '\".concat(name, \"' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.\"), \"To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.\");\n        isErrorLogged = true;\n      }\n\n      return React.createElement(Text, _extends({}, rest, {\n        style: [styles.icon, {\n          color: color,\n          fontSize: size\n        }],\n        pointerEvents: \"none\"\n      }), \"\\u25A1\");\n    };\n  }\n}\n\nexport var accessibilityProps = Platform.OS === 'web' ? {\n  role: 'img',\n  focusable: false\n} : {\n  accessibilityElementsHidden: true,\n  importantForAccessibility: 'no-hide-descendants'\n};\n\nvar defaultIcon = function defaultIcon(_ref2) {\n  var name = _ref2.name,\n      color = _ref2.color,\n      size = _ref2.size,\n      direction = _ref2.direction,\n      allowFontScaling = _ref2.allowFontScaling;\n  return React.createElement(MaterialCommunityIcons, _extends({\n    allowFontScaling: allowFontScaling,\n    name: name,\n    color: color,\n    size: size,\n    style: [{\n      transform: [{\n        scaleX: direction === 'rtl' ? -1 : 1\n      }]\n    }, styles.icon],\n    pointerEvents: \"none\"\n  }, accessibilityProps));\n};\n\nvar styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default defaultIcon;","map":{"version":3,"sources":["MaterialCommunityIcon.tsx"],"names":["MaterialCommunityIcons","require","global","isErrorLogged","size","rest","e","console","styles","color","fontSize","accessibilityProps","role","focusable","accessibilityElementsHidden","importantForAccessibility","defaultIcon","allowFontScaling","transform","scaleX","direction","icon","backgroundColor"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAWA,IAAA,sBAAA;;AAEA,IAAI;EAEFA,sBAAsB,GAAGC,OAAAA,6CAAAA,CAAzBD,OAAAA;AAFF,CAAA,CAIE,OAAA,CAAA,EAAU;EACV,IAEEE,MAAM,CAANA,MAAAA,IAEAA,MAAM,CAANA,MAAAA,CAFAA,IAAAA,IAIAA,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CANF,sBAAA,EAOE;IAIAF,sBAAsB,GAAGE,MAAM,CAANA,MAAAA,CAAAA,IAAAA,CAAzBF,sBAAAA;EAXF,CAAA,MAYO;IACL,IAAIG,aAAa,GADZ,KACL;;IAIAH,sBAAsB,GAAG,gCAAA,IAAA,EAAoC;MAAnC,IAAA,IAAA,GAAmC,IAAnC,CAAA,IAAA;MAAA,IAAA,KAAA,GAAmC,IAAnC,CAAA,KAAA;MAAA,IAAeI,IAAf,GAAmC,IAAnC,CAAeA,IAAf;MAAA,IAAwBC,IAAxB,GAAmC,wBAAA,CAAA,IAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,MAAA,CAAA,CAAnC;;MAExB,IAAI,CAAJ,aAAA,EAAoB;QAClB,IACE,CAAC,8DAAA,IAAA,CACCC,CAAC,CAFL,OACG,CADH,EAIE;UACAC,OAAO,CAAPA,KAAAA,CAAAA,CAAAA;QACD;;QAEDA,OAAO,CAAPA,IAAAA,CAAAA,0BAAAA,MAAAA,CAAAA,IAAAA,EAAAA,kGAAAA,CAAAA,EAAAA,sKAAAA;QAKAJ,aAAa,GAAbA,IAAAA;MACD;;MAED,OACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;QAEE,KAAK,EAAE,CAACK,MAAM,CAAP,IAAA,EAAc;UAAEC,KAAF,EAAEA,KAAF;UAASC,QAAQ,EAAEN;QAAnB,CAAd,CAFT;QAIE,aAAa,EAAC;MAJhB,CAAA,CAAA,EADF,QACE,CADF;IAnBFJ,CAAAA;EA8BD;AACF;;AAED,OAAO,IAAMW,kBAAkB,GAC7B,QAAQ,CAAR,EAAA,KAAA,KAAA,GACI;EACEC,IAAI,EADN,KAAA;EAEEC,SAAS,EAAE;AAFb,CADJ,GAKI;EACEC,2BAA2B,EAD7B,IAAA;EAEEC,yBAAyB,EAAE;AAF7B,CANC;;AAWP,IAAMC,WAAW,GAAG,SAAdA,WAAc;EAAA,IAAC,IAAD,SAAC,IAAD;EAAA,IAAC,KAAD,SAAC,KAAD;EAAA,IAAC,IAAD,SAAC,IAAD;EAAA,IAAC,SAAD,SAAC,SAAD;EAAA,IAKlBC,gBALkB,SAKlBA,gBALkB;EAAA,OAOlB,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,QAAA,CAAA;IACE,gBAAgB,EADlB,gBAAA;IAEE,IAAI,EAFN,IAAA;IAGE,KAAK,EAHP,KAAA;IAIE,IAAI,EAJN,IAAA;IAKE,KAAK,EAAE,CACL;MACEC,SAAS,EAAE,CAAC;QAAEC,MAAM,EAAEC,SAAS,KAATA,KAAAA,GAAsB,CAAtBA,CAAAA,GAA2B;MAArC,CAAD;IADb,CADK,EAILZ,MAAM,CATV,IAKS,CALT;IAWE,aAAa,EAAC;EAXhB,CAAA,EAPF,kBAOE,CAAA,CAPkB;AAAA,CAApB;;AAuBA,IAAMA,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/Ba,IAAI,EAAE;IACJC,eAAe,EAAE;EADb;AADyB,CAAlB,CAAf;AAMA,eAAA,WAAA","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, Text, Platform } from 'react-native';\n\nexport type IconProps = {\n  name: string;\n  color: string;\n  size: number;\n  direction: 'rtl' | 'ltr';\n  allowFontScaling?: boolean;\n};\n\nlet MaterialCommunityIcons: any;\n\ntry {\n  // Optionally require vector-icons\n  MaterialCommunityIcons = require('react-native-vector-icons/MaterialCommunityIcons')\n    .default;\n} catch (e) {\n  if (\n    // @ts-ignore\n    global.__expo &&\n    // @ts-ignore\n    global.__expo.Icon &&\n    // @ts-ignore\n    global.__expo.Icon.MaterialCommunityIcons\n  ) {\n    // Snack doesn't properly bundle vector icons from subpath\n    // Use icons from the __expo global if available\n    // @ts-ignore\n    MaterialCommunityIcons = global.__expo.Icon.MaterialCommunityIcons;\n  } else {\n    let isErrorLogged = false;\n\n    // Fallback component for icons\n    // @ts-ignore\n    MaterialCommunityIcons = ({ name, color, size, ...rest }) => {\n      /* eslint-disable no-console */\n      if (!isErrorLogged) {\n        if (\n          !/(Cannot find module|Module not found|Cannot resolve module)/.test(\n            e.message\n          )\n        ) {\n          console.error(e);\n        }\n\n        console.warn(\n          `Tried to use the icon '${name}' in a component from 'react-native-paper', but 'react-native-vector-icons' could not be loaded.`,\n          `To remove this warning, try installing 'react-native-vector-icons' or use another method to specify icon: https://callstack.github.io/react-native-paper/icons.html.`\n        );\n\n        isErrorLogged = true;\n      }\n\n      return (\n        <Text\n          {...rest}\n          style={[styles.icon, { color, fontSize: size }]}\n          // @ts-ignore\n          pointerEvents=\"none\"\n        >\n          â–¡\n        </Text>\n      );\n    };\n  }\n}\n\nexport const accessibilityProps =\n  Platform.OS === 'web'\n    ? {\n        role: 'img',\n        focusable: false,\n      }\n    : {\n        accessibilityElementsHidden: true,\n        importantForAccessibility: 'no-hide-descendants' as 'no-hide-descendants',\n      };\n\nconst defaultIcon = ({\n  name,\n  color,\n  size,\n  direction,\n  allowFontScaling,\n}: IconProps) => (\n  <MaterialCommunityIcons\n    allowFontScaling={allowFontScaling}\n    name={name}\n    color={color}\n    size={size}\n    style={[\n      {\n        transform: [{ scaleX: direction === 'rtl' ? -1 : 1 }],\n      },\n      styles.icon,\n    ]}\n    pointerEvents=\"none\"\n    {...accessibilityProps}\n  />\n);\n\nconst styles = StyleSheet.create({\n  icon: {\n    backgroundColor: 'transparent',\n  },\n});\n\nexport default defaultIcon;\n"]},"metadata":{},"sourceType":"module"}