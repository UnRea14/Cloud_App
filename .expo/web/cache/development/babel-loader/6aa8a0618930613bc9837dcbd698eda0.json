{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport color from 'color';\nimport IconButton from \"./IconButton\";\nimport Surface from \"./Surface\";\nimport { withTheme } from \"../core/theming\";\nimport MaterialCommunityIcon from \"./MaterialCommunityIcon\";\n\nvar Searchbar = function (_React$Component) {\n  _inherits(Searchbar, _React$Component);\n\n  var _super = _createSuper(Searchbar);\n\n  function Searchbar() {\n    var _this;\n\n    _classCallCheck(this, Searchbar);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleClearPress\", function () {\n      _this.clear();\n\n      _this.props.onChangeText && _this.props.onChangeText('');\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"root\", void 0);\n\n    return _this;\n  }\n\n  _createClass(Searchbar, [{\n    key: \"setNativeProps\",\n    value: function setNativeProps(args) {\n      return this.root && this.root.setNativeProps(args);\n    }\n  }, {\n    key: \"isFocused\",\n    value: function isFocused() {\n      return this.root && this.root.isFocused();\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      return this.root && this.root.clear();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      return this.root && this.root.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      return this.root && this.root.blur();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          clearAccessibilityLabel = _this$props.clearAccessibilityLabel,\n          clearIcon = _this$props.clearIcon,\n          icon = _this$props.icon,\n          customIconColor = _this$props.iconColor,\n          inputStyle = _this$props.inputStyle,\n          onIconPress = _this$props.onIconPress,\n          placeholder = _this$props.placeholder,\n          searchAccessibilityLabel = _this$props.searchAccessibilityLabel,\n          style = _this$props.style,\n          theme = _this$props.theme,\n          value = _this$props.value,\n          rest = _objectWithoutProperties(_this$props, [\"clearAccessibilityLabel\", \"clearIcon\", \"icon\", \"iconColor\", \"inputStyle\", \"onIconPress\", \"placeholder\", \"searchAccessibilityLabel\", \"style\", \"theme\", \"value\"]);\n\n      var colors = theme.colors,\n          roundness = theme.roundness,\n          dark = theme.dark,\n          fonts = theme.fonts;\n      var textColor = colors.text;\n      var font = fonts.regular;\n      var iconColor = customIconColor || (dark ? textColor : color(textColor).alpha(0.54).rgb().string());\n      var rippleColor = color(textColor).alpha(0.32).rgb().string();\n      return React.createElement(Surface, {\n        style: [{\n          borderRadius: roundness,\n          elevation: 4\n        }, styles.container, style]\n      }, React.createElement(IconButton, {\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\",\n        borderless: true,\n        rippleColor: rippleColor,\n        onPress: onIconPress,\n        color: iconColor,\n        icon: icon || function (_ref) {\n          var size = _ref.size,\n              color = _ref.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"magnify\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n          });\n        },\n        accessibilityLabel: searchAccessibilityLabel\n      }), React.createElement(TextInput, _extends({\n        style: [styles.input, _objectSpread({\n          color: textColor\n        }, font), inputStyle],\n        placeholder: placeholder || '',\n        placeholderTextColor: colors.placeholder,\n        selectionColor: colors.primary,\n        underlineColorAndroid: \"transparent\",\n        returnKeyType: \"search\",\n        keyboardAppearance: dark ? 'dark' : 'light',\n        accessibilityTraits: \"search\",\n        accessibilityRole: \"search\",\n        ref: function ref(c) {\n          _this2.root = c;\n        },\n        value: value\n      }, rest)), React.createElement(IconButton, {\n        borderless: true,\n        disabled: !value,\n        accessibilityLabel: clearAccessibilityLabel,\n        color: value ? iconColor : 'rgba(255, 255, 255, 0)',\n        rippleColor: rippleColor,\n        onPress: this.handleClearPress,\n        icon: clearIcon || function (_ref2) {\n          var size = _ref2.size,\n              color = _ref2.color;\n          return React.createElement(MaterialCommunityIcon, {\n            name: \"close\",\n            color: color,\n            size: size,\n            direction: I18nManager.isRTL ? 'rtl' : 'ltr'\n          });\n        },\n        accessibilityTraits: \"button\",\n        accessibilityComponentType: \"button\",\n        accessibilityRole: \"button\"\n      }));\n    }\n  }]);\n\n  return Searchbar;\n}(React.Component);\n\n_defineProperty(Searchbar, \"defaultProps\", {\n  searchAccessibilityLabel: 'search',\n  clearAccessibilityLabel: 'clear'\n});\n\nvar styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center'\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0\n  }\n});\nexport default withTheme(Searchbar);","map":{"version":3,"sources":["Searchbar.tsx"],"names":["Searchbar","React","searchAccessibilityLabel","clearAccessibilityLabel","setNativeProps","isFocused","clear","focus","blur","render","iconColor","value","fonts","textColor","colors","font","customIconColor","dark","color","rippleColor","borderRadius","elevation","styles","icon","I18nManager","placeholder","c","clearIcon","container","flexDirection","alignItems","input","flex","fontSize","paddingLeft","alignSelf","textAlign","minWidth","withTheme"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAUA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,UAAA;AACA,OAAA,OAAA;AACA,SAAA,SAAA;AAGA,OAAA,qBAAA;;IAiFA,S;;;;;EAA+C,qBAAA;IAAA;;IAAA;;IAAA,kCAAA,IAAA;MAAA,IAAA;IAAA;;IAAA,gDAAA,IAAA;;IAAA,eAAA,gCAAA,kBAAA,EAKlB,YAAM;MAC/B,MAAA,KAAA;;MACA,MAAA,KAAA,CAAA,YAAA,IAA2B,MAAA,KAAA,CAAA,YAAA,CAA3B,EAA2B,CAA3B;IAP2C,CAAA,CAAA;;IAAA,eAAA,gCAAA,MAAA,EAAA,KAAA,CAAA,CAAA;;IAAA;EAAA;;;;WAczCI,wBAAc,IAAdA,EAA6B;MAC/B,OAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAAA,cAAA,CAApB,IAAoB,CAApB;IACD;;;WAKDC,qBAAY;MACV,OAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAApB,SAAoB,EAApB;IACD;;;WAKDC,iBAAQ;MACN,OAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAApB,KAAoB,EAApB;IACD;;;WAKDC,iBAAQ;MACN,OAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAApB,KAAoB,EAApB;IACD;;;WAKDC,gBAAO;MACL,OAAO,KAAA,IAAA,IAAa,KAAA,IAAA,CAApB,IAAoB,EAApB;IACD;;;WAEDC,kBAAS;MAAA;;MACP,IAAA,WAAA,GAaI,KAbJ,KAAA;MAAA,IAAM,uBAAN,GAAA,WAAA,CAAM,uBAAN;MAAA,IAAM,SAAN,GAAA,WAAA,CAAM,SAAN;MAAA,IAAM,IAAN,GAAA,WAAA,CAAM,IAAN;MAAA,IAAM,eAAN,GAAA,WAAA,CAIEC,SAJF;MAAA,IAAM,UAAN,GAAA,WAAA,CAAM,UAAN;MAAA,IAAM,WAAN,GAAA,WAAA,CAAM,WAAN;MAAA,IAAM,WAAN,GAAA,WAAA,CAAM,WAAN;MAAA,IAAM,wBAAN,GAAA,WAAA,CAAM,wBAAN;MAAA,IAAM,KAAN,GAAA,WAAA,CAAM,KAAN;MAAA,IAAM,KAAN,GAAA,WAAA,CAAM,KAAN;MAAA,IAWEC,KAXF,GAAA,WAAA,CAWEA,KAXF;MAAA,IAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,yBAAA,EAAA,WAAA,EAAA,MAAA,EAAA,WAAA,EAAA,YAAA,EAAA,aAAA,EAAA,aAAA,EAAA,0BAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,CAAA,CAAA;;MAcA,IAAM,MAAN,GAAA,KAAA,CAAM,MAAN;MAAA,IAAM,SAAN,GAAA,KAAA,CAAM,SAAN;MAAA,IAAM,IAAN,GAAA,KAAA,CAAM,IAAN;MAAA,IAAiCC,KAAjC,GAAA,KAAA,CAAiCA,KAAjC;MACA,IAAMC,SAAS,GAAGC,MAAM,CAAxB,IAAA;MACA,IAAMC,IAAI,GAAGH,KAAK,CAAlB,OAAA;MACA,IAAMF,SAAS,GACbM,eAAe,KACdC,IAAI,GAAA,SAAA,GAEDC,KAAK,CAALA,SAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAJN,MAIMA,EAHW,CADjB;MAQA,IAAMC,WAAW,GAAGD,KAAK,CAALA,SAAK,CAALA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAApB,MAAoBA,EAApB;MAKA,OACE,KAAA,CAAA,aAAA,CAAA,OAAA,EAAA;QACE,KAAK,EAAE,CACL;UAAEE,YAAY,EAAd,SAAA;UAA2BC,SAAS,EAAE;QAAtC,CADK,EAELC,MAAM,CAFD,SAAA,EAAA,KAAA;MADT,CAAA,EAOE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;QACE,mBAAmB,EADrB,QAAA;QAEE,0BAA0B,EAF5B,QAAA;QAGE,iBAAiB,EAHnB,QAAA;QAIE,UAAU,EAJZ,IAAA;QAKE,WAAW,EALb,WAAA;QAME,OAAO,EANT,WAAA;QAOE,KAAK,EAPP,SAAA;QAQE,IAAI,EACFC,IAAI,IACH;UAAA,IAAC,IAAD,QAAC,IAAD;UAAA,IAASL,KAAT,QAASA,KAAT;UAAA,OACC,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;YACE,IAAI,EADN,SAAA;YAEE,KAAK,EAFP,KAAA;YAGE,IAAI,EAHN,IAAA;YAIE,SAAS,EAAEM,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAA4B;UAJzC,CAAA,CADD;QAAA,CAVL;QAmBE,kBAAkB,EAAEtB;MAnBtB,CAAA,CAPF,EA4BE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;QACE,KAAK,EAAE,CAACoB,MAAM,CAAP,KAAA,EAAA,aAAA,CAAA;UAAiBJ,KAAK,EAAEL;QAAxB,CAAA,EAAA,IAAA,CAAA,EADT,UACS,CADT;QAEE,WAAW,EAAEY,WAAW,IAF1B,EAAA;QAGE,oBAAoB,EAAEX,MAAM,CAH9B,WAAA;QAIE,cAAc,EAAEA,MAAM,CAJxB,OAAA;QAKE,qBAAqB,EALvB,aAAA;QAME,aAAa,EANf,QAAA;QAOE,kBAAkB,EAAEG,IAAI,GAAA,MAAA,GAP1B,OAAA;QAQE,mBAAmB,EARrB,QAAA;QASE,iBAAiB,EATnB,QAAA;QAUE,GAAG,EAAES,aAAAA,CAAC,EAAI;UACR,MAAA,CAAA,IAAA,GAAA,CAAA;QAXJ,CAAA;QAaE,KAAK,EAAEf;MAbT,CAAA,EA5BF,IA4BE,CAAA,CA5BF,EA4CE,KAAA,CAAA,aAAA,CAAA,UAAA,EAAA;QACE,UAAU,EADZ,IAAA;QAEE,QAAQ,EAAE,CAFZ,KAAA;QAGE,kBAAkB,EAHpB,uBAAA;QAIE,KAAK,EAAEA,KAAK,GAAA,SAAA,GAJd,wBAAA;QAKE,WAAW,EALb,WAAA;QAME,OAAO,EAAE,KANX,gBAAA;QAOE,IAAI,EACFgB,SAAS,IACR;UAAA,IAAC,IAAD,SAAC,IAAD;UAAA,IAAST,KAAT,SAASA,KAAT;UAAA,OACC,KAAA,CAAA,aAAA,CAAA,qBAAA,EAAA;YACE,IAAI,EADN,OAAA;YAEE,KAAK,EAFP,KAAA;YAGE,IAAI,EAHN,IAAA;YAIE,SAAS,EAAEM,WAAW,CAAXA,KAAAA,GAAAA,KAAAA,GAA4B;UAJzC,CAAA,CADD;QAAA,CATL;QAkBE,mBAAmB,EAlBrB,QAAA;QAmBE,0BAA0B,EAnB5B,QAAA;QAoBE,iBAAiB,EAAC;MApBpB,CAAA,CA5CF,CADF;IAqED;;;;EAlJqBvB,KAAK,CAA7B,S;;gBAAMD,S,kBACkB;EACpBE,wBAAwB,EADJ,QAAA;EAEpBC,uBAAuB,EAAE;AAFL,C;;AAoJxB,IAAMmB,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BM,SAAS,EAAE;IACTC,aAAa,EADJ,KAAA;IAETC,UAAU,EAAE;EAFH,CADoB;EAK/BC,KAAK,EAAE;IACLC,IAAI,EADC,CAAA;IAELC,QAAQ,EAFH,EAAA;IAGLC,WAAW,EAHN,CAAA;IAILC,SAAS,EAJJ,SAAA;IAKLC,SAAS,EAAEZ,WAAW,CAAXA,KAAAA,GAAAA,OAAAA,GALN,MAAA;IAMLa,QAAQ,EAAE;EANL;AALwB,CAAlB,CAAf;AAeA,eAAeC,SAAS,CAAxB,SAAwB,CAAxB","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  TextInput,\n  I18nManager,\n  ViewStyle,\n  TextStyle,\n} from 'react-native';\n\nimport color from 'color';\nimport IconButton from './IconButton';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\nimport { IconSource } from './Icon';\nimport MaterialCommunityIcon from './MaterialCommunityIcon';\n\ntype Props = React.ComponentPropsWithRef<typeof TextInput> & {\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  clearAccessibilityLabel?: string;\n  /**\n   * Accessibility label for the button. This is read by the screen reader when the user taps the button.\n   */\n  searchAccessibilityLabel?: string;\n  /**\n   * Hint text shown when the input is empty.\n   */\n  placeholder?: string;\n  /**\n   * The value of the text input.\n   */\n  value: string;\n  /**\n   * Icon name for the left icon button (see `onIconPress`).\n   */\n  icon?: IconSource;\n  /**\n   * Callback that is called when the text input's text changes.\n   */\n  onChangeText?: (query: string) => void;\n  /**\n   * Callback to execute if we want the left icon to act as button.\n   */\n  onIconPress?: () => void;\n  /**\n   * Set style of the TextInput component inside the searchbar\n   */\n  inputStyle?: StyleProp<TextStyle>;\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * @optional\n   */\n  theme: Theme;\n  /**\n   * Custom color for icon, default will be derived from theme\n   */\n  iconColor?: string;\n  /**\n   * Custom icon for clear button, default will be icon close\n   */\n  clearIcon?: IconSource;\n};\n\n/**\n * Searchbar is a simple input box where users can type search queries.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/searchbar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Searchbar } from 'react-native-paper';\n * \n * const MyComponent = () => {\n *   const [searchQuery, setSearchQuery] = React.useState('');\n * \n *   const onChangeSearch = query => setSearchQuery(query);\n * \n *   return (\n *     <Searchbar\n *       placeholder=\"Search\"\n *       onChangeText={onChangeSearch}\n *       value={searchQuery}\n *     />\n *   );\n * };\n * \n * export default MyComponent;\n\n * ```\n */\nclass Searchbar extends React.Component<Props> {\n  static defaultProps = {\n    searchAccessibilityLabel: 'search',\n    clearAccessibilityLabel: 'clear',\n  };\n  private handleClearPress = () => {\n    this.clear();\n    this.props.onChangeText && this.props.onChangeText('');\n  };\n\n  private root: TextInput | undefined | null;\n\n  /**\n   * @internal\n   */ setNativeProps(args: Object) {\n    return this.root && this.root.setNativeProps(args);\n  }\n\n  /**\n   * Returns `true` if the input is currently focused, `false` otherwise.\n   */\n  isFocused() {\n    return this.root && this.root.isFocused();\n  }\n\n  /**\n   * Removes all text from the TextInput.\n   */\n  clear() {\n    return this.root && this.root.clear();\n  }\n\n  /**\n   * Focuses the input.\n   */\n  focus() {\n    return this.root && this.root.focus();\n  }\n\n  /**\n   * Removes focus from the input.\n   */\n  blur() {\n    return this.root && this.root.blur();\n  }\n\n  render() {\n    const {\n      clearAccessibilityLabel,\n      clearIcon,\n      icon,\n      iconColor: customIconColor,\n      inputStyle,\n      onIconPress,\n      placeholder,\n      searchAccessibilityLabel,\n      style,\n      theme,\n      value,\n      ...rest\n    } = this.props;\n    const { colors, roundness, dark, fonts } = theme;\n    const textColor = colors.text;\n    const font = fonts.regular;\n    const iconColor =\n      customIconColor ||\n      (dark\n        ? textColor\n        : color(textColor)\n            .alpha(0.54)\n            .rgb()\n            .string());\n    const rippleColor = color(textColor)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    return (\n      <Surface\n        style={[\n          { borderRadius: roundness, elevation: 4 },\n          styles.container,\n          style,\n        ]}\n      >\n        <IconButton\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n          borderless\n          rippleColor={rippleColor}\n          onPress={onIconPress}\n          color={iconColor}\n          icon={\n            icon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"magnify\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityLabel={searchAccessibilityLabel}\n        />\n        <TextInput\n          style={[styles.input, { color: textColor, ...font }, inputStyle]}\n          placeholder={placeholder || ''}\n          placeholderTextColor={colors.placeholder}\n          selectionColor={colors.primary}\n          underlineColorAndroid=\"transparent\"\n          returnKeyType=\"search\"\n          keyboardAppearance={dark ? 'dark' : 'light'}\n          accessibilityTraits=\"search\"\n          accessibilityRole=\"search\"\n          ref={c => {\n            this.root = c;\n          }}\n          value={value}\n          {...rest}\n        />\n        <IconButton\n          borderless\n          disabled={!value}\n          accessibilityLabel={clearAccessibilityLabel}\n          color={value ? iconColor : 'rgba(255, 255, 255, 0)'}\n          rippleColor={rippleColor}\n          onPress={this.handleClearPress}\n          icon={\n            clearIcon ||\n            (({ size, color }) => (\n              <MaterialCommunityIcon\n                name=\"close\"\n                color={color}\n                size={size}\n                direction={I18nManager.isRTL ? 'rtl' : 'ltr'}\n              />\n            ))\n          }\n          accessibilityTraits=\"button\"\n          accessibilityComponentType=\"button\"\n          accessibilityRole=\"button\"\n        />\n      </Surface>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  input: {\n    flex: 1,\n    fontSize: 18,\n    paddingLeft: 8,\n    alignSelf: 'stretch',\n    textAlign: I18nManager.isRTL ? 'right' : 'left',\n    minWidth: 0,\n  },\n});\n\nexport default withTheme(Searchbar);\n"]},"metadata":{},"sourceType":"module"}