{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport color from 'color';\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Icon from \"../Icon\";\nimport TouchableRipple from \"../TouchableRipple\";\nimport Text from \"../Typography/Text\";\nimport { withTheme } from \"../../core/theming\";\nimport { black, white } from \"../../styles/colors\";\n\nvar MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  var _super = _createSuper(MenuItem);\n\n  function MenuItem() {\n    _classCallCheck(this, MenuItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          theme = _this$props.theme,\n          style = _this$props.style,\n          testID = _this$props.testID,\n          titleStyle = _this$props.titleStyle;\n      var disabledColor = color(theme.dark ? white : black).alpha(0.32).rgb().string();\n      var titleColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.87).rgb().string();\n      var iconColor = disabled ? disabledColor : color(theme.colors.text).alpha(0.54).rgb().string();\n      return React.createElement(TouchableRipple, {\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        testID: testID\n      }, React.createElement(View, {\n        style: styles.row\n      }, icon ? React.createElement(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\"\n      }, React.createElement(Icon, {\n        source: icon,\n        size: 24,\n        color: iconColor\n      })) : null, React.createElement(View, {\n        style: [styles.item, styles.content, icon ? styles.widthWithIcon : null],\n        pointerEvents: \"none\"\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, {\n          color: titleColor\n        }, titleStyle]\n      }, title))));\n    }\n  }]);\n\n  return MenuItem;\n}(React.Component);\n\n_defineProperty(MenuItem, \"displayName\", 'Menu.Item');\n\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 40;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  }\n});\nexport default withTheme(MenuItem);\nexport { MenuItem };","map":{"version":3,"sources":["MenuItem.tsx"],"names":["MenuItem","React","render","titleStyle","disabledColor","color","theme","titleColor","disabled","iconColor","styles","testID","row","icon","minWidth","maxWidth","iconWidth","container","paddingHorizontal","height","justifyContent","flexDirection","width","title","fontSize","item","marginHorizontal","content","widthWithIcon","withTheme"],"mappings":"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","sourcesContent":["import color from 'color';\nimport * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  TextStyle,\n  ViewStyle,\n  StyleProp,\n} from 'react-native';\nimport Icon, { IconSource } from '../Icon';\nimport TouchableRipple from '../TouchableRipple';\nimport Text from '../Typography/Text';\nimport { withTheme } from '../../core/theming';\nimport { black, white } from '../../styles/colors';\nimport { Theme } from '../../types';\n\ntype Props = {\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: React.ReactNode;\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: IconSource;\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * @optional\n   */\n  theme: Theme;\n  style?: StyleProp<ViewStyle>;\n  titleStyle?: StyleProp<TextStyle>;\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string;\n};\n\n/**\n * A component to show a single list item inside a Menu.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/menu-item.png\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Menu } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View style={{ flex: 1 }}>\n *     <Menu.Item icon=\"redo\" onPress={() => {}} title=\"Redo\" />\n *     <Menu.Item icon=\"undo\" onPress={() => {}} title=\"Undo\" />\n *     <Menu.Item icon=\"content-cut\" onPress={() => {}} title=\"Cut\" disabled />\n *     <Menu.Item icon=\"content-copy\" onPress={() => {}} title=\"Copy\" disabled />\n *     <Menu.Item icon=\"content-paste\" onPress={() => {}} title=\"Paste\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\n\nclass MenuItem extends React.Component<Props> {\n  static displayName = 'Menu.Item';\n\n  render() {\n    const {\n      icon,\n      title,\n      disabled,\n      onPress,\n      theme,\n      style,\n      testID,\n      titleStyle,\n    } = this.props;\n\n    const disabledColor = color(theme.dark ? white : black)\n      .alpha(0.32)\n      .rgb()\n      .string();\n\n    const titleColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.87)\n          .rgb()\n          .string();\n\n    const iconColor = disabled\n      ? disabledColor\n      : color(theme.colors.text)\n          .alpha(0.54)\n          .rgb()\n          .string();\n\n    return (\n      <TouchableRipple\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {icon ? (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              <Icon source={icon} size={24} color={iconColor} />\n            </View>\n          ) : null}\n          <View\n            style={[\n              styles.item,\n              styles.content,\n              icon ? styles.widthWithIcon : null,\n            ]}\n            pointerEvents=\"none\"\n          >\n            <Text\n              numberOfLines={1}\n              style={[styles.title, { color: titleColor }, titleStyle]}\n            >\n              {title}\n            </Text>\n          </View>\n        </View>\n      </TouchableRipple>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 40;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n});\n\nexport default withTheme(MenuItem);\n\n// @component-docs ignore-next-line\nexport { MenuItem };\n"]},"metadata":{},"sourceType":"module"}